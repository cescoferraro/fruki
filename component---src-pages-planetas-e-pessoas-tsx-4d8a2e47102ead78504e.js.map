{"version":3,"file":"component---src-pages-planetas-e-pessoas-tsx-4d8a2e47102ead78504e.js","mappings":"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","sources":["webpack://fruki/./src/components/fruki-iniciativas.tsx","webpack://fruki/./src/components/useIsBigScreen.tsx","webpack://fruki/./static/assets/home/img_6.png","webpack://fruki/./src/components/Fruki-question.tsx","webpack://fruki/./src/components/Eco-number.tsx","webpack://fruki/./src/components/FrukiFuture.tsx","webpack://fruki/./static/assets/img_15.png","webpack://fruki/./src/components/frukiRespect.tsx","webpack://fruki/./node_modules/react-intersection-observer/react-intersection-observer.modern.mjs","webpack://fruki/./src/pages/planetas-e-pessoas.tsx"],"sourcesContent":["import { Box, Typography } from '@mui/material'\nimport { FrukiSlider } from 'components/Banners/FrukiSlider'\nimport { SliderCard } from 'components/Banners/SliderCard'\nimport { navigate } from 'gatsby'\nimport * as React from 'react'\n\nexport const FrukiIniciativas = ({\n  initiatives,\n  title,\n}: {\n  title?: string\n  initiatives: GatsbyTypes.PlanetasPessoasPageListQueryQuery['initiatives']['edges']\n}) => {\n  return (\n    <>\n      <Box sx={{ height: 430, background: 'white', pt: 8 }}>\n        <Typography color=\"primary\" variant=\"h4\" textAlign=\"center\">\n          {title || 'Nossas Iniciativas'}\n        </Typography>\n      </Box>\n      <FrukiSlider translate={-230}>\n        {initiatives\n          .map((e) => e.node.frontmatter)\n          .map((p, idx) => (\n            <SliderCard\n              onClick={() => {\n                navigate(`/iniciativas${p?.path}`)\n              }}\n              key={p?.title}\n              itemId={p?.title || `${idx}`}\n              title={p?.title || ''}\n              description={\n                <Typography color=\"primary.contrastText\">\n                  {p?.description || ''}\n                </Typography>\n              }\n              image={p?.image || ''}\n            />\n          ))}\n      </FrukiSlider>\n    </>\n  )\n}\n","import { useMediaQuery, useTheme } from '@mui/material'\n\nexport function useIsBigScreen(): boolean {\n  return useMediaQuery(useTheme().breakpoints.up('md'), {})\n}\n","export default __webpack_public_path__ + \"static/img_6-edd1df2f3db024b812e383352aa9e098.png\";","import { Box, Button, Container, Typography, useTheme } from '@mui/material'\nimport { center } from 'components/center'\nimport * as React from 'react'\n\nexport function FrukiQuestion() {\n  const theme = useTheme()\n  return (\n    <Box sx={{ backgroundColor: theme.palette.secondary.main }}>\n      <Container sx={{ py: 8 }}>\n        <Typography\n          variant=\"h4\"\n          fontWeight={700}\n          align=\"center\"\n          color=\"primary.contrastText\"\n        >\n          Vamos deixar o mundo mais gentil?\n        </Typography>\n        <Typography\n          component={'p'}\n          sx={{ pt: 4, pb: 5 }}\n          variant=\"bodyLarge\"\n          align=\"center\"\n          color=\"primary.contrastText\"\n        >\n          Acesse o Relatório de Sustentabilidade 2022 da Fruki Bebidas.\n        </Typography>\n        <Box sx={{ ...center }}>\n          <Button\n            color=\"primary\"\n            variant=\"contained\"\n            size=\"large\"\n            startIcon={\n              <svg\n                width=\"24\"\n                height=\"24\"\n                viewBox=\"0 0 24 24\"\n                fill=\"none\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n              >\n                <path\n                  fillRule=\"evenodd\"\n                  clipRule=\"evenodd\"\n                  d=\"M18.0031 16.7488C18.0037 18.2681 16.7723 19.5 15.2531 19.5H8.75C7.23121 19.5 6 18.2688 6 16.75V7.25C6 5.73122 7.23122 4.5 8.75 4.5H12.1716C12.9009 4.5 13.6004 4.78973 14.1161 5.30546L17.1949 8.38423C17.7104 8.89967 18.0001 9.59867 18.0004 10.3276L18.0031 16.7488ZM8.75 8.5C8.33579 8.5 8 8.83579 8 9.25C8 9.66421 8.33579 10 8.75 10H13.25C13.6642 10 14 9.66421 14 9.25C14 8.83579 13.6642 8.5 13.25 8.5H8.75ZM8 12.5C8 12.0858 8.33579 11.75 8.75 11.75H15.25C15.6642 11.75 16 12.0858 16 12.5C16 12.9142 15.6642 13.25 15.25 13.25H8.75C8.33579 13.25 8 12.9142 8 12.5ZM8.75 15.25C8.33579 15.25 8 15.5858 8 16C8 16.4142 8.33579 16.75 8.75 16.75H12.25C12.6642 16.75 13 16.4142 13 16C13 15.5858 12.6642 15.25 12.25 15.25H8.75Z\"\n                  fill=\"white\"\n                />\n              </svg>\n            }\n          >\n            Relatório de Sustentabilidade Socioambiental\n          </Button>\n        </Box>\n      </Container>\n    </Box>\n  )\n}\n","import { Box, Typography } from '@mui/material'\nimport { center } from 'components/center'\nimport * as React from 'react'\n\nexport function EcoNumber({\n  number,\n  label,\n}: {\n  label: string\n  number: number\n}) {\n  return (\n    <Box display=\"flex\" sx={{ ...center, pt: 2 }}>\n      <Box>\n        <Typography variant=\"h1\" fontSize={120} color=\"secondary\">\n          {number.toLocaleString('pt-BR')}\n        </Typography>\n      </Box>\n      <Box display=\"flex\" flexDirection=\"column\">\n        <Typography variant=\"h1\" fontSize={80} sx={{ color: '#5F99AF' }}>\n          kg\n        </Typography>\n        <Typography color=\"primary.contrastText\" fontSize={24} fontWeight={700}>\n          {label}\n        </Typography>\n      </Box>\n    </Box>\n  )\n}\n","import { Box, SxProps, Typography, useTheme } from '@mui/material'\nimport { ResponsiveStyleValue } from '@mui/system/styleFunctionSx/styleFunctionSx'\nimport image6 from 'assets/home/img_6.png'\nimport { GridContainer, GridItem } from 'components/FrukiContainer'\nimport { useIsBigScreen } from 'components/useIsBigScreen'\nimport { Button } from 'gatsby-material-ui-components'\nimport * as React from 'react'\nimport { SVGProps } from 'react'\n\nexport const WhiteDesktopLeaf = (props: SVGProps<SVGSVGElement>) => (\n  <svg width=\"134\" height=\"175\" viewBox=\"0 0 134 175\" fill=\"none\" {...props}>\n    <path\n      d=\"M0 120C0 53.7258 53.7258 0 120 0H134V55C134 121.274 80.2742 175 14 175H0V120Z\"\n      fill=\"white\"\n    />\n  </svg>\n)\nexport const WhiteMobileLeaf = (props: SVGProps<SVGSVGElement>) => (\n  <svg\n    width={63}\n    height={83}\n    viewBox=\"0 0 63 83\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    {...props}\n  >\n    <path\n      d=\"M0 63C0 28.2061 28.2061 0 63 0V20C63 54.7939 34.7939 83 0 83V63Z\"\n      fill=\"white\"\n    />\n  </svg>\n)\n\nexport const DarkGreenMobileLeaf = (props: SVGProps<SVGSVGElement>) => (\n  <svg\n    width={59}\n    height={118}\n    viewBox=\"0 0 59 118\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    {...props}\n  >\n    <path\n      d=\"M-31 90C-31 40.2944 9.29437 0 59 0V28C59 77.7056 18.7056 118 -31 118V90Z\"\n      fill=\"#034638\"\n    />\n  </svg>\n)\n\nexport function FrukiFuture({\n  title = 'Um futuro criado por todos nós ',\n  text,\n  action,\n  height,\n  leftSX,\n}: {\n  title?: string\n  text?: string | React.ReactNode\n  leftSX?: SxProps\n  height?: ResponsiveStyleValue<number>\n  action: string\n}) {\n  const isBig = useIsBigScreen()\n  const { palette } = useTheme()\n  const background = palette.secondary.main\n  return (\n    <GridContainer sx={{ background }}>\n      <GridItem height={height} sx={{ background, ...leftSX }}>\n        <Typography\n          variant={isBig ? 'h1' : 'h5'}\n          fontWeight={700}\n          sx={{ zIndex: 3 }}\n          color=\"secondary.contrastText\"\n        >\n          {title}\n        </Typography>\n        <Typography\n          sx={{ py: 2, zIndex: 3 }}\n          color=\"secondary.contrastText\"\n          variant=\"body1\"\n          fontSize={20}\n        >\n          {text}\n        </Typography>\n        {action && (\n          <Box>\n            <Button\n              to=\"/planetas-e-pessoas\"\n              variant=\"contained\"\n              color=\"primary\"\n              size=\"large\"\n            >\n              {action}\n            </Button>\n          </Box>\n        )}\n\n        <DarkgreenLeaf\n          style={{\n            display: isBig ? 'block' : 'none',\n            position: 'absolute',\n            bottom: 200,\n            left: 0,\n          }}\n        />\n      </GridItem>\n      <GridItem\n        height={height}\n        sx={{\n          background,\n          backgroundImage: `url(${image6})`,\n          backgroundSize: 'cover',\n          backgroundPosition: 'center',\n          borderWidth: 2,\n          borderBottomLeftRadius: {\n            xs: 240,\n            sm: 240,\n            md: 440,\n          },\n        }}\n      >\n        <DarkGreenMobileLeaf\n          style={{\n            display: isBig ? 'none' : 'block',\n            position: 'absolute',\n            bottom: 0,\n            left: 0,\n            // zIndex: -1,\n          }}\n        />\n\n        <WhiteMobileLeaf\n          style={{\n            display: isBig ? 'none' : 'block',\n            position: 'absolute',\n            top: 10,\n            right: 40,\n          }}\n        />\n        <WhiteDesktopLeaf\n          style={{\n            display: isBig ? 'block' : 'none',\n            position: 'absolute',\n            top: 105,\n            left: -50,\n          }}\n        />\n\n        <BlueMobileLeaf\n          style={{\n            display: isBig ? 'none' : 'block',\n            position: 'absolute',\n            bottom: -70,\n            right: 0,\n          }}\n        />\n        <BlueDesktopLeaf\n          style={{\n            display: isBig ? 'block' : 'none',\n            position: 'absolute',\n            bottom: 70,\n            right: 0,\n          }}\n        />\n      </GridItem>\n    </GridContainer>\n  )\n}\n\nexport const BlueDesktopLeaf = (props: SVGProps<SVGSVGElement>) => (\n  <svg\n    width={159}\n    height={261}\n    viewBox=\"0 0 159 261\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    {...props}\n  >\n    <path\n      d=\"M0 199C0 86.3339 91.3339 -5 204 -5V57C204 169.666 112.666 261 0 261V199Z\"\n      fill=\"#5F99AF\"\n    />\n  </svg>\n)\nexport const BlueMobileLeaf = (props: SVGProps<SVGSVGElement>) => (\n  <svg\n    width={42}\n    height={105}\n    viewBox=\"0 0 42 105\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    {...props}\n  >\n    <path\n      d=\"M0 77C0 27.2944 40.2944 -13 90 -13V15C90 64.7056 49.7056 105 0 105V77Z\"\n      fill=\"#5F99AF\"\n    />\n  </svg>\n)\nexport const DarkgreenLeaf = (props: SVGProps<SVGSVGElement>) => (\n  <svg\n    width={156}\n    height={316}\n    viewBox=\"0 0 156 316\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    {...props}\n  >\n    <path\n      d=\"M-44 200C-44 89.5431 45.5431 0 156 0V120C156 230.457 66.4569 320 -44 320V200Z\"\n      fill=\"#034638\"\n    />\n  </svg>\n)\n","export default __webpack_public_path__ + \"static/img_15-cf59818829e986f639ccfd5461e0d983.png\";","import { Typography } from '@mui/material'\nimport image9 from 'assets/img_15.png'\nimport { GridContainer, GridItem } from 'components/FrukiContainer'\nimport { useIsBigScreen } from 'components/useIsBigScreen'\nimport * as React from 'react'\nimport { SVGProps } from 'react'\nconst SVGComponent = (props: SVGProps<SVGSVGElement>) => (\n  <svg\n    width={163}\n    height={212}\n    viewBox=\"0 0 163 212\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    {...props}\n  >\n    <path\n      d=\"M0 163C0 72.9776 72.9776 0 163 0V49C163 139.022 90.0224 212 0 212V163Z\"\n      fill=\"#5F99AF\"\n    />\n  </svg>\n)\n\nexport function FrukiRespect() {\n  const isBig = useIsBigScreen()\n  const height = { xs: 500, sm: 500, md: 920 }\n  const rheight = { xs: 800, sm: 500, md: 920 }\n  return (\n    <GridContainer\n      sx={{\n        background: 'white',\n        flexDirection: {\n          xs: 'column',\n          sm: 'column',\n          md: 'row',\n        },\n      }}\n    >\n      <GridItem\n        sx={{\n          backgroundImage: `url(${image9})`,\n          backgroundSize: 'cover',\n          backgroundPosition: 'center',\n          borderWidth: 2,\n          borderBottomRightRadius: {\n            xs: 240,\n            sm: 240,\n            md: 440,\n          },\n          height,\n          minHeight: height,\n          maxHeight: height,\n        }}\n      >\n        <SVGComponent\n          style={{ position: 'absolute', right: 0, bottom: isBig ? 100 : 0 }}\n        />\n      </GridItem>\n      <GridItem\n        sx={{\n          height: rheight,\n          minHeight: rheight,\n          maxHeight: rheight,\n        }}\n      >\n        <Typography\n          variant={isBig ? 'h1' : 'h5'}\n          sx={{ fontWeight: 700, zIndex: 2 }}\n          color=\"secondary\"\n        >\n          Pensar nas pessoas é ser gentil{' '}\n        </Typography>\n        <Typography sx={{ zIndex: 2 }} variant=\"body1\" fontSize={20}>\n          A Fruki Bebidas é a soma das suas pessoas e o resultado de uma cultura\n          interna focada no desenvolvimento e na valorização de cada um dos\n          profissionais. Incentivamos o engajamento da equipe e a satisfação com\n          o ambiente de trabalho. A gente acredita que a maneira mais eficaz de\n          despertar a gentileza no dia a dia é sendo gentil. Nos importamos com\n          cada necessidade, individual e coletiva, de mais de 900 colaboradores\n          e seus familiares. Para isso, temos diversas iniciativas voltadas às\n          pessoas e à governança.\n        </Typography>\n      </GridItem>\n    </GridContainer>\n    // <NewGeneric\n    //   // height={{ xs: 500, sm: 500, md: 800 }}\n    //   sx={}\n    //   right={{\n    //     element: ,\n    //     sx: ,\n    //   }}\n    //   left={{\n    //     sx: ,\n    //   }}\n    // />\n  )\n}\n","import * as React from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nconst observerMap = new Map();\nconst RootIds = new WeakMap();\nlet rootId = 0;\nlet unsupportedValue = undefined;\n/**\r\n * What should be the default behavior if the IntersectionObserver is unsupported?\r\n * Ideally the polyfill has been loaded, you can have the following happen:\r\n * - `undefined`: Throw an error\r\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\r\n * **/\n\nfunction defaultFallbackInView(inView) {\n  unsupportedValue = inView;\n}\n/**\r\n * Generate a unique ID for the root element\r\n * @param root\r\n */\n\nfunction getRootId(root) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n/**\r\n * Convert the options to a string Id, based on the values.\r\n * Ensures we can reuse the same observer when observing elements with the same options.\r\n * @param options\r\n */\n\n\nfunction optionsToId(options) {\n  return Object.keys(options).sort().filter(key => options[key] !== undefined).map(key => {\n    return `${key}_${key === 'root' ? getRootId(options.root) : options[key]}`;\n  }).toString();\n}\n\nfunction createObserver(options) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map();\n    let thresholds;\n    const observer = new IntersectionObserver(entries => {\n      entries.forEach(entry => {\n        var _elements$get;\n\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView = entry.isIntersecting && thresholds.some(threshold => entry.intersectionRatio >= threshold); // @ts-ignore support IntersectionObserver v2\n\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        (_elements$get = elements.get(entry.target)) == null ? void 0 : _elements$get.forEach(callback => {\n          callback(inView, entry);\n        });\n      });\n    }, options); // Ensure we have a valid thresholds array. If not, use the threshold from the options\n\n    thresholds = observer.thresholds || (Array.isArray(options.threshold) ? options.threshold : [options.threshold || 0]);\n    instance = {\n      id,\n      observer,\n      elements\n    };\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n/**\r\n * @param element - DOM Element to observe\r\n * @param callback - Callback function to trigger when intersection status changes\r\n * @param options - Intersection Observer options\r\n * @param fallbackInView - Fallback inView value.\r\n * @return Function - Cleanup function that should be triggered to unregister the observer\r\n */\n\n\nfunction observe(element, callback, options = {}, fallbackInView = unsupportedValue) {\n  if (typeof window.IntersectionObserver === 'undefined' && fallbackInView !== undefined) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio: typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds\n    });\n    return () => {// Nothing to cleanup\n    };\n  } // An observer with the same options can be reused, so lets use this fact\n\n\n  const {\n    id,\n    observer,\n    elements\n  } = createObserver(options); // Register the callback listener for this element\n\n  let callbacks = elements.get(element) || [];\n\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n\nconst _excluded = [\"children\", \"as\", \"triggerOnce\", \"threshold\", \"root\", \"rootMargin\", \"onChange\", \"skip\", \"trackVisibility\", \"delay\", \"initialInView\", \"fallbackInView\"];\n\nfunction isPlainChildren(props) {\n  return typeof props.children !== 'function';\n}\n/**\r\n ## Render props\r\n\n To use the `<InView>` component, you pass it a function. It will be called\r\n whenever the state changes, with the new value of `inView`. In addition to the\r\n `inView` prop, children also receive a `ref` that should be set on the\r\n containing DOM element. This is the element that the IntersectionObserver will\r\n monitor.\r\n\n If you need it, you can also access the\r\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\r\n on `entry`, giving you access to all the details about the current intersection\r\n state.\r\n\n ```jsx\r\n import { InView } from 'react-intersection-observer';\r\n\n const Component = () => (\r\n <InView>\r\n {({ inView, ref, entry }) => (\r\n      <div ref={ref}>\r\n        <h2>{`Header inside viewport ${inView}.`}</h2>\r\n      </div>\r\n    )}\r\n </InView>\r\n );\r\n\n export default Component;\r\n ```\r\n\n ## Plain children\r\n\n You can pass any element to the `<InView />`, and it will handle creating the\r\n wrapping DOM element. Add a handler to the `onChange` method, and control the\r\n state in your own component. Any extra props you add to `<InView>` will be\r\n passed to the HTML element, allowing you set the `className`, `style`, etc.\r\n\n ```jsx\r\n import { InView } from 'react-intersection-observer';\r\n\n const Component = () => (\r\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\r\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\r\n </InView>\r\n );\r\n\n export default Component;\r\n ```\r\n */\n\n\nclass InView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.node = null;\n    this._unobserveCb = null;\n\n    this.handleNode = node => {\n      if (this.node) {\n        // Clear the old observer, before we start observing a new element\n        this.unobserve();\n\n        if (!node && !this.props.triggerOnce && !this.props.skip) {\n          // Reset the state if we get a new node, and we aren't ignoring updates\n          this.setState({\n            inView: !!this.props.initialInView,\n            entry: undefined\n          });\n        }\n      }\n\n      this.node = node ? node : null;\n      this.observeNode();\n    };\n\n    this.handleChange = (inView, entry) => {\n      if (inView && this.props.triggerOnce) {\n        // If `triggerOnce` is true, we should stop observing the element.\n        this.unobserve();\n      }\n\n      if (!isPlainChildren(this.props)) {\n        // Store the current State, so we can pass it to the children in the next render update\n        // There's no reason to update the state for plain children, since it's not used in the rendering.\n        this.setState({\n          inView,\n          entry\n        });\n      }\n\n      if (this.props.onChange) {\n        // If the user is actively listening for onChange, always trigger it\n        this.props.onChange(inView, entry);\n      }\n    };\n\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (prevProps.rootMargin !== this.props.rootMargin || prevProps.root !== this.props.root || prevProps.threshold !== this.props.threshold || prevProps.skip !== this.props.skip || prevProps.trackVisibility !== this.props.trackVisibility || prevProps.delay !== this.props.delay) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView\n    } = this.props;\n    this._unobserveCb = observe(this.node, this.handleChange, {\n      threshold,\n      root,\n      rootMargin,\n      // @ts-ignore\n      trackVisibility,\n      // @ts-ignore\n      delay\n    }, fallbackInView);\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n\n      this._unobserveCb = null;\n    }\n  }\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const {\n        inView,\n        entry\n      } = this.state;\n      return this.props.children({\n        inView,\n        entry,\n        ref: this.handleNode\n      });\n    }\n\n    const _this$props = this.props,\n          {\n      children,\n      as\n    } = _this$props,\n          props = _objectWithoutPropertiesLoose(_this$props, _excluded);\n\n    return React.createElement(as || 'div', _extends({\n      ref: this.handleNode\n    }, props), children);\n  }\n\n}\n\n/**\r\n * React Hooks make it easy to monitor the `inView` state of your components. Call\r\n * the `useInView` hook with the (optional) [options](#options) you need. It will\r\n * return an array containing a `ref`, the `inView` status and the current\r\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\r\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\r\n * report the status.\r\n *\r\n * @example\r\n * ```jsx\r\n * import React from 'react';\r\n * import { useInView } from 'react-intersection-observer';\r\n *\r\n * const Component = () => {\r\n *   const { ref, inView, entry } = useInView({\r\n *       threshold: 0,\r\n *   });\r\n *\r\n *   return (\r\n *     <div ref={ref}>\r\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\r\n *     </div>\r\n *   );\r\n * };\r\n * ```\r\n */\n\nfunction useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange\n} = {}) {\n  var _state$entry;\n\n  const [ref, setRef] = React.useState(null);\n  const callback = React.useRef();\n  const [state, setState] = React.useState({\n    inView: !!initialInView,\n    entry: undefined\n  }); // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n\n  callback.current = onChange;\n  React.useEffect(() => {\n    // Ensure we have node ref, and that we shouldn't skip observing\n    if (skip || !ref) return;\n    let unobserve;\n    unobserve = observe(ref, (inView, entry) => {\n      setState({\n        inView,\n        entry\n      });\n      if (callback.current) callback.current(inView, entry);\n\n      if (entry.isIntersecting && triggerOnce && unobserve) {\n        // If it should only trigger once, unobserve the element after it's inView\n        unobserve();\n        unobserve = undefined;\n      }\n    }, {\n      root,\n      rootMargin,\n      threshold,\n      // @ts-ignore\n      trackVisibility,\n      // @ts-ignore\n      delay\n    }, fallbackInView);\n    return () => {\n      if (unobserve) {\n        unobserve();\n      }\n    };\n  }, // We break the rule here, because we aren't including the actual `threshold` variable\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [// If the threshold is an array, convert it to a string, so it won't change between renders.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  Array.isArray(threshold) ? threshold.toString() : threshold, ref, root, rootMargin, triggerOnce, skip, trackVisibility, fallbackInView, delay]);\n  const entryTarget = (_state$entry = state.entry) == null ? void 0 : _state$entry.target;\n  React.useEffect(() => {\n    if (!ref && entryTarget && !triggerOnce && !skip) {\n      // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView,\n        entry: undefined\n      });\n    }\n  }, [ref, entryTarget, triggerOnce, skip, initialInView]);\n  const result = [setRef, state.inView, state.entry]; // Support object destructuring, by adding the specific values.\n\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n  return result;\n}\n\nexport { InView, defaultFallbackInView, observe, useInView };\n//# sourceMappingURL=react-intersection-observer.modern.mjs.map\n","import { Box, Container, Typography, useTheme } from '@mui/material'\nimport image6 from 'assets/home/img_6.png'\nimport { FrukiQuestion } from 'components//Fruki-question'\nimport { FrukiSlider } from 'components/Banners/FrukiSlider'\nimport { center } from 'components/center'\nimport { EcoNumber } from 'components/Eco-number'\nimport { FrukiIniciativas } from 'components/fruki-iniciativas'\nimport { FrukiAppBar } from 'components/FrukiAppBar'\nimport {\n  FrukiContainer,\n  GridContainer,\n  GridItem,\n} from 'components/FrukiContainer'\nimport { FrukiFooter } from 'components/FrukiFooter'\nimport {\n  BlueDesktopLeaf,\n  DarkgreenLeaf,\n  WhiteDesktopLeaf,\n} from 'components/FrukiFuture'\nimport { FrukiRespect } from 'components/frukiRespect'\nimport { useBrandsMemo } from 'components/useBrandsMemo'\nimport { useIsBigScreen } from 'components/useIsBigScreen'\nimport { graphql, navigate, PageProps } from 'gatsby'\nimport * as React from 'react'\nimport { SVGProps, useEffect, useState } from 'react'\nimport { useInView } from 'react-intersection-observer'\n\nfunction FrukiStats() {\n  const theme = useTheme()\n  const isBig = useIsBigScreen()\n  const [left, setLeft] = useState(0)\n  const [right, setRight] = useState(0)\n  const { ref, inView } = useInView({ threshold: 0 })\n  useEffect(() => {\n    let interval: NodeJS.Timer\n    if (inView) {\n      interval = setInterval(() => {\n        setLeft((l) => {\n          let result = l + 0.1\n          let b = result > 2.24\n          if (b) clearInterval(interval)\n          return b ? 2.24 : result\n        })\n      }, 500)\n    }\n    setLeft(0)\n\n    return () => {\n      clearInterval(interval)\n    }\n  }, [inView])\n  useEffect(() => {\n    let interval: NodeJS.Timer\n    if (inView) {\n      interval = setInterval(() => {\n        setRight((l) => {\n          let result = l + 0.1\n          let b = result > 3.6\n          if (b) clearInterval(interval)\n          return b ? 3.6 : result\n        })\n      }, 500)\n    }\n    setRight(0)\n\n    return () => {\n      clearInterval(interval)\n    }\n  }, [inView])\n\n  return (\n    <Box sx={{ backgroundColor: theme.palette.primary.main }}>\n      <Container sx={{ py: 8 }}>\n        <Typography\n          variant=\"h5\"\n          fontWeight={700}\n          align=\"center\"\n          color=\"primary.contrastText\"\n        >\n          A cada minuto que você está aqui, nós já reciclamos\n        </Typography>\n        <Box\n          ref={ref}\n          display=\"flex\"\n          flexDirection={isBig ? 'row' : 'column'}\n          justifyContent={'space-between'}\n          sx={{ py: 4 }}\n        >\n          <EcoNumber label={'De resíduos industriais'} number={left} />\n          <EcoNumber label={'De resíduos compensados'} number={right} />\n        </Box>\n      </Container>\n    </Box>\n  )\n}\nconst SVGComponent = (props: SVGProps<SVGSVGElement>) => (\n  <svg\n    width={163}\n    height={212}\n    viewBox=\"0 0 163 212\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    {...props}\n  >\n    <path\n      d=\"M0 163C0 72.9776 72.9776 0 163 0V0V49C163 139.022 90.0224 212 0 212V212V163Z\"\n      fill=\"white\"\n    />\n  </svg>\n)\n\nconst SustentabilidadePage: React.FC<\n  PageProps<GatsbyTypes.PlanetasPessoasPageListQueryQuery>\n> = ({ data }) => {\n  const theme = useTheme()\n\n  const { palette } = useTheme()\n  const background = palette.secondary.main\n  const height = { xs: 500, sm: 500, md: 875 }\n  const isBig = useIsBigScreen()\n  let md = 975\n  return (\n    <>\n      <FrukiAppBar />\n      <FrukiContainer>\n        <GridContainer sx={{ background }}>\n          <GridItem\n            height={height}\n            sx={{\n              background,\n              pr: {\n                xs: 2,\n                sm: 2,\n                md: 4,\n                lg: 8,\n              },\n              pl: {\n                xs: 2,\n                sm: 2,\n                md: 4,\n                lg: 8,\n              },\n              minHeight: {\n                xs: 400,\n                sm: 400,\n                md: md,\n              },\n            }}\n          >\n            <Typography\n              variant={isBig ? 'h1' : 'h5'}\n              fontWeight={700}\n              sx={{ zIndex: 3 }}\n              color=\"secondary.contrastText\"\n            >\n              Gentileza com o planeta\n            </Typography>\n            <Typography\n              sx={{ py: 2, zIndex: 3 }}\n              color=\"secondary.contrastText\"\n              variant=\"body1\"\n              fontSize={20}\n            >\n              Nosso compromisso com o planeta está firmado desde o início, e ele\n              se renova cada vez que você acredita e apoia. Ao longo dos anos,\n              buscamos melhorar ainda mais nossa relação com o meio ambiente por\n              meio de soluções inteligentes e iniciativas sustentáveis. A meta é\n              sermos cada vez mais eficientes em toda a operação. Aqui, a gente\n              gosta de inspirar mudanças positivas, por isso, somos pioneiros na\n              utilização de caminhões elétricos como parte da frota no\n              transporte de cargas no RS. Os veículos elétricos têm 0% de\n              emissões diretas de CO2eq, além de menor poluição sonora e maior\n              eficiência energética, o que contribui para a adoção de uma gestão\n              logística sustentável. Ser gentil com o planeta já faz parte do\n              nosso dia a dia, mas ainda há muito a se fazer. Nossa meta é\n              superar as exigências e contribuir 110% com o desenvolvimento\n              sustentável.{' '}\n            </Typography>\n          </GridItem>\n          <GridItem\n            height={height}\n            sx={{\n              minHeight: {\n                xs: 400,\n                sm: 400,\n                md: md,\n              },\n              background,\n              backgroundImage: `url(${image6})`,\n              backgroundSize: 'cover',\n              backgroundPosition: 'center',\n              borderWidth: 2,\n              borderBottomLeftRadius: {\n                xs: 240,\n                sm: 240,\n                md: 440,\n              },\n            }}\n          >\n            <WhiteDesktopLeaf\n              style={{\n                display: isBig ? 'block' : 'none',\n                position: 'absolute',\n                top: 105,\n                left: -50,\n              }}\n            />\n\n            <SVGComponent\n              style={{\n                display: isBig ? 'block' : 'none',\n                position: 'absolute',\n                bottom: -100,\n                right: 140,\n              }}\n            />\n          </GridItem>\n        </GridContainer>\n        <FrukiStats />\n        <FrukiRespect />\n        <Box\n          sx={{\n            height: 326,\n            background: theme.palette.primary.main,\n            pt: 8,\n          }}\n        >\n          <Typography color=\"secondary\" variant=\"h2\" textAlign=\"center\">\n            Certificados\n          </Typography>\n          <Typography\n            color=\"primary.contrastText\"\n            variant=\"h6\"\n            textAlign=\"center\"\n          >\n            Conheça os últimos prêmios conquistados pela Fruki Bebidas.{' '}\n          </Typography>\n        </Box>\n        <FrukiSlider translate={-250 / 2}>\n          {data.certificates.edges\n            .map((e) => e.node.frontmatter)\n            .map((p, idx) => (\n              <Box\n                key={`${p?.title}-${idx}`}\n                sx={{\n                  zIndex: 100,\n                  background: 'white',\n                  boxShadow: `none`,\n                  ':hover': {\n                    backgroundImage: `url(${p?.image})`,\n                  },\n                  backgroundImage: `url(${p?.image})`,\n                  backgroundPosition: 'center',\n                  backgroundSize: 'cover',\n                  backgroundColor: p?.color || 'purple',\n                  borderRadius: 250 / 2,\n                }}\n                onClick={() => navigate(p?.title || '')}\n              >\n                <Box\n                  style={{\n                    width: 250,\n                    height: 250,\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                  }}\n                />\n              </Box>\n            ))}\n        </FrukiSlider>\n        <FrukiIniciativas initiatives={data?.initiatives.edges} />\n        <FrukiQuestion />\n        <FrukiFooter brands={useBrandsMemo(data?.brands)} />\n      </FrukiContainer>\n    </>\n  )\n}\n\nexport const pageQuery = graphql`\n  fragment CertificatesFrontMatter on MdxFrontmatter {\n    date(formatString: \"MMMM DD, YYYY\")\n    title\n    description\n    image\n    name\n    logo\n    color\n  }\n  fragment CertificatesFragment on MdxConnection {\n    edges {\n      node {\n        excerpt\n        frontmatter {\n          ...CertificatesFrontMatter\n        }\n      }\n    }\n  }\n\n  fragment CertificatesFragmentQuery on Query {\n    certificates: allMdx(\n      filter: {\n        internal: { contentFilePath: { regex: \"/content/certificate/\" } }\n      }\n      sort: [{ fields: { slug: ASC } }]\n    ) {\n      ...CertificatesFragment\n    }\n  }\n  fragment InitiativesFrontMatter on MdxFrontmatter {\n    date(formatString: \"MMMM DD, YYYY\")\n    title\n    description\n    image\n    name\n    logo\n    path\n  }\n  fragment InitiativesFragment on MdxConnection {\n    edges {\n      node {\n        excerpt\n        frontmatter {\n          ...InitiativesFrontMatter\n        }\n      }\n    }\n  }\n\n  fragment InitiativesFragmentQuery on Query {\n    initiatives: allMdx(\n      filter: {\n        internal: { contentFilePath: { regex: \"/content/iniciativas/\" } }\n      }\n      sort: [{ fields: { slug: ASC } }]\n    ) {\n      ...InitiativesFragment\n    }\n  }\n  query PlanetasPessoasPageListQuery {\n    ...InitiativesFragmentQuery\n    ...CertificatesFragmentQuery\n    ...BrandsFragmentQuery\n  }\n`\nexport default SustentabilidadePage\n"],"names":["FrukiIniciativas","_ref","initiatives","title","React","Box","sx","height","background","pt","Typography","color","variant","textAlign","FrukiSlider","translate","map","e","node","frontmatter","p","idx","SliderCard","onClick","navigate","path","key","itemId","description","image","useIsBigScreen","useMediaQuery","useTheme","breakpoints","up","FrukiQuestion","theme","backgroundColor","palette","secondary","main","Container","py","fontWeight","align","component","pb","center","Button","size","startIcon","width","viewBox","fill","xmlns","fillRule","clipRule","d","EcoNumber","number","label","display","fontSize","toLocaleString","flexDirection","WhiteDesktopLeaf","props","SVGComponent","FrukiRespect","isBig","xs","sm","md","rheight","GridContainer","GridItem","backgroundImage","image9","backgroundSize","backgroundPosition","borderWidth","borderBottomRightRadius","minHeight","maxHeight","style","position","right","bottom","zIndex","observerMap","Map","RootIds","WeakMap","unsupportedValue","rootId","optionsToId","options","Object","keys","sort","filter","undefined","root","has","set","toString","get","observe","element","callback","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","threshold","time","boundingClientRect","intersectionRect","rootBounds","id","observer","elements","instance","thresholds","entries","forEach","entry","_elements$get","inView","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","indexOf","length","delete","unobserve","disconnect","FrukiStats","left","setLeft","useState","setRight","ref","delay","rootMargin","triggerOnce","skip","initialInView","onChange","_state$entry","setRef","state","setState","current","entryTarget","result","useInView","useEffect","interval","setInterval","l","b","clearInterval","primary","justifyContent","data","FrukiAppBar","FrukiContainer","pr","lg","pl","image6","borderBottomLeftRadius","top","certificates","edges","boxShadow","borderRadius","alignItems","FrukiFooter","brands","useBrandsMemo"],"sourceRoot":""}