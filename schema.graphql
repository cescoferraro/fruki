"""
Define parent-child relations between types. This is used to add `child*` and `children*` convenience fields like `childImageSharp`.
"""
directive @childOf(
  """
  A list of mime-types this type is a child of. Usually these are the mime-types handled by a transformer plugin.
  """
  mimeTypes: [String!]! = []

  """
  A list of types this type is a child of. Usually these are the types handled by a transformer plugin.
  """
  types: [String!]! = ["File"]
) on OBJECT

"""Add date formatting options."""
directive @dateformat(difference: String, formatString: String, fromNow: Boolean, locale: String) on FIELD_DEFINITION

"""Do not infer field types from field values."""
directive @dontInfer on OBJECT

"""Link to File node by relative path."""
directive @fileByRelativePath(from: String) on FIELD_DEFINITION

"""Infer field types from field values."""
directive @infer on OBJECT

"""Link to node by foreign-key relation."""
directive @link(by: String! = "id", from: String, on: String) on FIELD_DEFINITION

"""Define the mime-types handled by this type."""
directive @mimeTypes(
  """The mime-types handled by this type."""
  types: [String!]! = []
) on OBJECT

"""
DEPRECATED: Use interface inheritance instead, i.e. "interface Foo implements Node".

Adds root query fields for an interface. All implementing types must also implement the Node interface.
"""
directive @nodeInterface on INTERFACE

"""Proxy resolver from another field."""
directive @proxy(from: String!, fromNode: Boolean! = false) on FIELD_DEFINITION

input AVIFOptions {
  lossless: Boolean
  quality: Int
  speed: Int
}

input BlurredOptions {
  """
  Force the output format for the low-res preview. Default is to use the same format as the input. You should rarely need to change this
  """
  toFormat: ImageFormat

  """Width of the generated low-res preview. Default is 20px"""
  width: Int
}

input BooleanQueryOperatorInput {
  eq: Boolean
  in: [Boolean]
  ne: Boolean
  nin: [Boolean]
}

type ContentYaml implements Node {
  caption: String
  children: [Node!]!
  id: ID!
  internal: Internal!
  name: String
  parent: Node
  title: String
}

type ContentYamlConnection {
  distinct(field: ContentYamlFieldSelector!): [String!]!
  edges: [ContentYamlEdge!]!
  group(field: ContentYamlFieldSelector!, limit: Int, skip: Int): [ContentYamlGroupConnection!]!
  max(field: ContentYamlFieldSelector!): Float
  min(field: ContentYamlFieldSelector!): Float
  nodes: [ContentYaml!]!
  pageInfo: PageInfo!
  sum(field: ContentYamlFieldSelector!): Float
  totalCount: Int!
}

type ContentYamlEdge {
  next: ContentYaml
  node: ContentYaml!
  previous: ContentYaml
}

input ContentYamlFieldSelector {
  caption: FieldSelectorEnum
  children: NodeFieldSelector
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  name: FieldSelectorEnum
  parent: NodeFieldSelector
  title: FieldSelectorEnum
}

input ContentYamlFilterInput {
  caption: StringQueryOperatorInput
  children: NodeFilterListInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  name: StringQueryOperatorInput
  parent: NodeFilterInput
  title: StringQueryOperatorInput
}

input ContentYamlFilterListInput {
  elemMatch: ContentYamlFilterInput
}

type ContentYamlGroupConnection {
  distinct(field: ContentYamlFieldSelector!): [String!]!
  edges: [ContentYamlEdge!]!
  field: String!
  fieldValue: String
  group(field: ContentYamlFieldSelector!, limit: Int, skip: Int): [ContentYamlGroupConnection!]!
  max(field: ContentYamlFieldSelector!): Float
  min(field: ContentYamlFieldSelector!): Float
  nodes: [ContentYaml!]!
  pageInfo: PageInfo!
  sum(field: ContentYamlFieldSelector!): Float
  totalCount: Int!
}

input ContentYamlSortInput {
  caption: SortOrderEnum
  children: NodeSortInput
  id: SortOrderEnum
  internal: InternalSortInput
  name: SortOrderEnum
  parent: NodeSortInput
  title: SortOrderEnum
}

"""
A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

input DateQueryOperatorInput {
  eq: Date
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  nin: [Date]
}

type Directory implements Node {
  absolutePath: String!
  accessTime(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  atime(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  atimeMs: Float!
  base: String!
  birthTime(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
  changeTime(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  children: [Node!]!
  ctime(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  ctimeMs: Float!
  dev: Int!
  dir: String!
  ext: String!
  extension: String!
  gid: Int!
  id: ID!
  ino: Float!
  internal: Internal!
  mode: Int!
  modifiedTime(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  mtime(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  mtimeMs: Float!
  name: String!
  nlink: Int!
  parent: Node
  prettySize: String!
  rdev: Int!
  relativeDirectory: String!
  relativePath: String!
  root: String!
  size: Int!
  sourceInstanceName: String!
  uid: Int!
}

type DirectoryConnection {
  distinct(field: DirectoryFieldSelector!): [String!]!
  edges: [DirectoryEdge!]!
  group(field: DirectoryFieldSelector!, limit: Int, skip: Int): [DirectoryGroupConnection!]!
  max(field: DirectoryFieldSelector!): Float
  min(field: DirectoryFieldSelector!): Float
  nodes: [Directory!]!
  pageInfo: PageInfo!
  sum(field: DirectoryFieldSelector!): Float
  totalCount: Int!
}

type DirectoryEdge {
  next: Directory
  node: Directory!
  previous: Directory
}

input DirectoryFieldSelector {
  absolutePath: FieldSelectorEnum
  accessTime: FieldSelectorEnum
  atime: FieldSelectorEnum
  atimeMs: FieldSelectorEnum
  base: FieldSelectorEnum
  birthTime: FieldSelectorEnum
  birthtime: FieldSelectorEnum
  birthtimeMs: FieldSelectorEnum
  changeTime: FieldSelectorEnum
  children: NodeFieldSelector
  ctime: FieldSelectorEnum
  ctimeMs: FieldSelectorEnum
  dev: FieldSelectorEnum
  dir: FieldSelectorEnum
  ext: FieldSelectorEnum
  extension: FieldSelectorEnum
  gid: FieldSelectorEnum
  id: FieldSelectorEnum
  ino: FieldSelectorEnum
  internal: InternalFieldSelector
  mode: FieldSelectorEnum
  modifiedTime: FieldSelectorEnum
  mtime: FieldSelectorEnum
  mtimeMs: FieldSelectorEnum
  name: FieldSelectorEnum
  nlink: FieldSelectorEnum
  parent: NodeFieldSelector
  prettySize: FieldSelectorEnum
  rdev: FieldSelectorEnum
  relativeDirectory: FieldSelectorEnum
  relativePath: FieldSelectorEnum
  root: FieldSelectorEnum
  size: FieldSelectorEnum
  sourceInstanceName: FieldSelectorEnum
  uid: FieldSelectorEnum
}

input DirectoryFilterInput {
  absolutePath: StringQueryOperatorInput
  accessTime: DateQueryOperatorInput
  atime: DateQueryOperatorInput
  atimeMs: FloatQueryOperatorInput
  base: StringQueryOperatorInput
  birthTime: DateQueryOperatorInput
  birthtime: DateQueryOperatorInput
  birthtimeMs: FloatQueryOperatorInput
  changeTime: DateQueryOperatorInput
  children: NodeFilterListInput
  ctime: DateQueryOperatorInput
  ctimeMs: FloatQueryOperatorInput
  dev: IntQueryOperatorInput
  dir: StringQueryOperatorInput
  ext: StringQueryOperatorInput
  extension: StringQueryOperatorInput
  gid: IntQueryOperatorInput
  id: StringQueryOperatorInput
  ino: FloatQueryOperatorInput
  internal: InternalFilterInput
  mode: IntQueryOperatorInput
  modifiedTime: DateQueryOperatorInput
  mtime: DateQueryOperatorInput
  mtimeMs: FloatQueryOperatorInput
  name: StringQueryOperatorInput
  nlink: IntQueryOperatorInput
  parent: NodeFilterInput
  prettySize: StringQueryOperatorInput
  rdev: IntQueryOperatorInput
  relativeDirectory: StringQueryOperatorInput
  relativePath: StringQueryOperatorInput
  root: StringQueryOperatorInput
  size: IntQueryOperatorInput
  sourceInstanceName: StringQueryOperatorInput
  uid: IntQueryOperatorInput
}

type DirectoryGroupConnection {
  distinct(field: DirectoryFieldSelector!): [String!]!
  edges: [DirectoryEdge!]!
  field: String!
  fieldValue: String
  group(field: DirectoryFieldSelector!, limit: Int, skip: Int): [DirectoryGroupConnection!]!
  max(field: DirectoryFieldSelector!): Float
  min(field: DirectoryFieldSelector!): Float
  nodes: [Directory!]!
  pageInfo: PageInfo!
  sum(field: DirectoryFieldSelector!): Float
  totalCount: Int!
}

input DirectorySortInput {
  absolutePath: SortOrderEnum
  accessTime: SortOrderEnum
  atime: SortOrderEnum
  atimeMs: SortOrderEnum
  base: SortOrderEnum
  birthTime: SortOrderEnum
  birthtime: SortOrderEnum
  birthtimeMs: SortOrderEnum
  changeTime: SortOrderEnum
  children: NodeSortInput
  ctime: SortOrderEnum
  ctimeMs: SortOrderEnum
  dev: SortOrderEnum
  dir: SortOrderEnum
  ext: SortOrderEnum
  extension: SortOrderEnum
  gid: SortOrderEnum
  id: SortOrderEnum
  ino: SortOrderEnum
  internal: InternalSortInput
  mode: SortOrderEnum
  modifiedTime: SortOrderEnum
  mtime: SortOrderEnum
  mtimeMs: SortOrderEnum
  name: SortOrderEnum
  nlink: SortOrderEnum
  parent: NodeSortInput
  prettySize: SortOrderEnum
  rdev: SortOrderEnum
  relativeDirectory: SortOrderEnum
  relativePath: SortOrderEnum
  root: SortOrderEnum
  size: SortOrderEnum
  sourceInstanceName: SortOrderEnum
  uid: SortOrderEnum
}

input DuotoneGradient {
  highlight: String!
  opacity: Int
  shadow: String!
}

enum FieldSelectorEnum {
  SELECT
}

type File implements Node {
  absolutePath: String!
  accessTime(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  atime(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  atimeMs: Float!
  base: String!
  birthTime(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
  blksize: Int
  blocks: Int
  changeTime(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!

  """
  Returns the first child node of type ContentYaml or null if there are no children of given type on this node
  """
  childContentYaml: ContentYaml

  """
  Returns the first child node of type ImageSharp or null if there are no children of given type on this node
  """
  childImageSharp: ImageSharp

  """
  Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node
  """
  childMarkdownRemark: MarkdownRemark

  """
  Returns the first child node of type Mdx or null if there are no children of given type on this node
  """
  childMdx: Mdx
  children: [Node!]!

  """Returns all children nodes filtered by type ContentYaml"""
  childrenContentYaml: [ContentYaml]

  """Returns all children nodes filtered by type ImageSharp"""
  childrenImageSharp: [ImageSharp]

  """Returns all children nodes filtered by type MarkdownRemark"""
  childrenMarkdownRemark: [MarkdownRemark]

  """Returns all children nodes filtered by type Mdx"""
  childrenMdx: [Mdx]
  ctime(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  ctimeMs: Float!
  dev: Int!
  dir: String!
  ext: String!
  extension: String!
  gid: Int!
  id: ID!
  ino: Float!
  internal: Internal!
  mode: Int!
  modifiedTime(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  mtime(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  mtimeMs: Float!
  name: String!
  nlink: Int!
  parent: Node
  prettySize: String!

  """Copy file to static directory and return public url to it"""
  publicURL: String
  rdev: Int!
  relativeDirectory: String!
  relativePath: String!
  root: String!
  size: Int!
  sourceInstanceName: String!
  uid: Int!
}

type FileConnection {
  distinct(field: FileFieldSelector!): [String!]!
  edges: [FileEdge!]!
  group(field: FileFieldSelector!, limit: Int, skip: Int): [FileGroupConnection!]!
  max(field: FileFieldSelector!): Float
  min(field: FileFieldSelector!): Float
  nodes: [File!]!
  pageInfo: PageInfo!
  sum(field: FileFieldSelector!): Float
  totalCount: Int!
}

type FileEdge {
  next: File
  node: File!
  previous: File
}

input FileFieldSelector {
  absolutePath: FieldSelectorEnum
  accessTime: FieldSelectorEnum
  atime: FieldSelectorEnum
  atimeMs: FieldSelectorEnum
  base: FieldSelectorEnum
  birthTime: FieldSelectorEnum
  birthtime: FieldSelectorEnum
  birthtimeMs: FieldSelectorEnum
  blksize: FieldSelectorEnum
  blocks: FieldSelectorEnum
  changeTime: FieldSelectorEnum
  childContentYaml: ContentYamlFieldSelector
  childImageSharp: ImageSharpFieldSelector
  childMarkdownRemark: MarkdownRemarkFieldSelector
  childMdx: MdxFieldSelector
  children: NodeFieldSelector
  childrenContentYaml: ContentYamlFieldSelector
  childrenImageSharp: ImageSharpFieldSelector
  childrenMarkdownRemark: MarkdownRemarkFieldSelector
  childrenMdx: MdxFieldSelector
  ctime: FieldSelectorEnum
  ctimeMs: FieldSelectorEnum
  dev: FieldSelectorEnum
  dir: FieldSelectorEnum
  ext: FieldSelectorEnum
  extension: FieldSelectorEnum
  gid: FieldSelectorEnum
  id: FieldSelectorEnum
  ino: FieldSelectorEnum
  internal: InternalFieldSelector
  mode: FieldSelectorEnum
  modifiedTime: FieldSelectorEnum
  mtime: FieldSelectorEnum
  mtimeMs: FieldSelectorEnum
  name: FieldSelectorEnum
  nlink: FieldSelectorEnum
  parent: NodeFieldSelector
  prettySize: FieldSelectorEnum
  publicURL: FieldSelectorEnum
  rdev: FieldSelectorEnum
  relativeDirectory: FieldSelectorEnum
  relativePath: FieldSelectorEnum
  root: FieldSelectorEnum
  size: FieldSelectorEnum
  sourceInstanceName: FieldSelectorEnum
  uid: FieldSelectorEnum
}

input FileFilterInput {
  absolutePath: StringQueryOperatorInput
  accessTime: DateQueryOperatorInput
  atime: DateQueryOperatorInput
  atimeMs: FloatQueryOperatorInput
  base: StringQueryOperatorInput
  birthTime: DateQueryOperatorInput
  birthtime: DateQueryOperatorInput
  birthtimeMs: FloatQueryOperatorInput
  blksize: IntQueryOperatorInput
  blocks: IntQueryOperatorInput
  changeTime: DateQueryOperatorInput
  childContentYaml: ContentYamlFilterInput
  childImageSharp: ImageSharpFilterInput
  childMarkdownRemark: MarkdownRemarkFilterInput
  childMdx: MdxFilterInput
  children: NodeFilterListInput
  childrenContentYaml: ContentYamlFilterListInput
  childrenImageSharp: ImageSharpFilterListInput
  childrenMarkdownRemark: MarkdownRemarkFilterListInput
  childrenMdx: MdxFilterListInput
  ctime: DateQueryOperatorInput
  ctimeMs: FloatQueryOperatorInput
  dev: IntQueryOperatorInput
  dir: StringQueryOperatorInput
  ext: StringQueryOperatorInput
  extension: StringQueryOperatorInput
  gid: IntQueryOperatorInput
  id: StringQueryOperatorInput
  ino: FloatQueryOperatorInput
  internal: InternalFilterInput
  mode: IntQueryOperatorInput
  modifiedTime: DateQueryOperatorInput
  mtime: DateQueryOperatorInput
  mtimeMs: FloatQueryOperatorInput
  name: StringQueryOperatorInput
  nlink: IntQueryOperatorInput
  parent: NodeFilterInput
  prettySize: StringQueryOperatorInput
  publicURL: StringQueryOperatorInput
  rdev: IntQueryOperatorInput
  relativeDirectory: StringQueryOperatorInput
  relativePath: StringQueryOperatorInput
  root: StringQueryOperatorInput
  size: IntQueryOperatorInput
  sourceInstanceName: StringQueryOperatorInput
  uid: IntQueryOperatorInput
}

type FileGroupConnection {
  distinct(field: FileFieldSelector!): [String!]!
  edges: [FileEdge!]!
  field: String!
  fieldValue: String
  group(field: FileFieldSelector!, limit: Int, skip: Int): [FileGroupConnection!]!
  max(field: FileFieldSelector!): Float
  min(field: FileFieldSelector!): Float
  nodes: [File!]!
  pageInfo: PageInfo!
  sum(field: FileFieldSelector!): Float
  totalCount: Int!
}

input FileSortInput {
  absolutePath: SortOrderEnum
  accessTime: SortOrderEnum
  atime: SortOrderEnum
  atimeMs: SortOrderEnum
  base: SortOrderEnum
  birthTime: SortOrderEnum
  birthtime: SortOrderEnum
  birthtimeMs: SortOrderEnum
  blksize: SortOrderEnum
  blocks: SortOrderEnum
  changeTime: SortOrderEnum
  childContentYaml: ContentYamlSortInput
  childImageSharp: ImageSharpSortInput
  childMarkdownRemark: MarkdownRemarkSortInput
  childMdx: MdxSortInput
  children: NodeSortInput
  childrenContentYaml: ContentYamlSortInput
  childrenImageSharp: ImageSharpSortInput
  childrenMarkdownRemark: MarkdownRemarkSortInput
  childrenMdx: MdxSortInput
  ctime: SortOrderEnum
  ctimeMs: SortOrderEnum
  dev: SortOrderEnum
  dir: SortOrderEnum
  ext: SortOrderEnum
  extension: SortOrderEnum
  gid: SortOrderEnum
  id: SortOrderEnum
  ino: SortOrderEnum
  internal: InternalSortInput
  mode: SortOrderEnum
  modifiedTime: SortOrderEnum
  mtime: SortOrderEnum
  mtimeMs: SortOrderEnum
  name: SortOrderEnum
  nlink: SortOrderEnum
  parent: NodeSortInput
  prettySize: SortOrderEnum
  publicURL: SortOrderEnum
  rdev: SortOrderEnum
  relativeDirectory: SortOrderEnum
  relativePath: SortOrderEnum
  root: SortOrderEnum
  size: SortOrderEnum
  sourceInstanceName: SortOrderEnum
  uid: SortOrderEnum
}

input FloatQueryOperatorInput {
  eq: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  ne: Float
  nin: [Float]
}

scalar GatsbyImageData

input GatsbyImageDataQueryOperatorInput {
  eq: GatsbyImageData
  in: [GatsbyImageData]
  ne: GatsbyImageData
  nin: [GatsbyImageData]
}

enum GatsbyImageFormat {
  AUTO
  AVIF
  JPG
  NO_CHANGE
  PNG
  WEBP
}

enum GatsbyImageLayout {
  CONSTRAINED
  FIXED
  FULL_WIDTH
}

enum GatsbyImagePlaceholder {
  BLURRED
  DOMINANT_COLOR
  NONE
  TRACED_SVG
}

enum ImageCropFocus {
  ATTENTION
  CENTER
  EAST
  ENTROPY
  NORTH
  NORTHEAST
  NORTHWEST
  SOUTH
  SOUTHEAST
  SOUTHWEST
  WEST
}

enum ImageFit {
  CONTAIN
  COVER
  FILL
  INSIDE
  OUTSIDE
}

enum ImageFormat {
  AUTO
  AVIF
  JPG
  NO_CHANGE
  PNG
  WEBP
}

enum ImageLayout {
  CONSTRAINED
  FIXED
  FULL_WIDTH
}

enum ImagePlaceholder {
  BLURRED
  DOMINANT_COLOR
  NONE
  TRACED_SVG
}

type ImageSharp implements Node {
  children: [Node!]!
  fixed(background: String = "rgba(0,0,0,1)", base64Width: Int, cropFocus: ImageCropFocus = ATTENTION, duotone: DuotoneGradient = {}, fit: ImageFit = COVER, grayscale: Boolean = false, height: Int, jpegProgressive: Boolean = true, jpegQuality: Int, pngCompressionSpeed: Int = 4, pngQuality: Int, quality: Int, rotate: Int = 0, toFormat: ImageFormat = NO_CHANGE, toFormatBase64: ImageFormat = NO_CHANGE, traceSVG: Potrace = {}, trim: Float = 0, webpQuality: Int, width: Int): ImageSharpFixed
  fluid(
    background: String = "rgba(0,0,0,1)"
    base64Width: Int
    cropFocus: ImageCropFocus = ATTENTION
    duotone: DuotoneGradient = {}
    fit: ImageFit = COVER
    grayscale: Boolean = false
    jpegProgressive: Boolean = true
    jpegQuality: Int
    maxHeight: Int
    maxWidth: Int
    pngCompressionSpeed: Int = 4
    pngQuality: Int
    quality: Int
    rotate: Int = 0
    sizes: String = ""

    """
    A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]
    """
    srcSetBreakpoints: [Int] = []
    toFormat: ImageFormat = NO_CHANGE
    toFormatBase64: ImageFormat = NO_CHANGE
    traceSVG: Potrace = {}
    trim: Float = 0
    webpQuality: Int
  ): ImageSharpFluid
  gatsbyImageData(
    """
    If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """Options to pass to sharp when generating AVIF images."""
    avifOptions: AVIFOptions

    """
    Background color applied to the wrapper. Also passed to sharp to use as a background when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String

    """
    Options for the low-resolution placeholder image. Set placeholder to "BLURRED" to use this
    """
    blurredOptions: BlurredOptions

    """
    Specifies the image widths to generate. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    The image formats to generate. Valid values are "AUTO" (meaning the same format as the source image), "JPG", "PNG", "WEBP" and "AVIF".
    The default value is [AUTO, WEBP], and you should rarely need to change this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    """
    formats: [ImageFormat]

    """
    The display height of the generated image for layout = FIXED, and the maximum display height of the largest image for layout = CONSTRAINED.
    The image will be cropped if the aspect ratio does not match the source image. If omitted, it is calculated from the supplied width,
    matching the aspect ratio of the source image.
    """
    height: Int

    """Options to pass to sharp when generating JPG images."""
    jpgOptions: JPGOptions

    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: ImageLayout = CONSTRAINED

    """
    A list of image pixel densities to generate. It will never generate images larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for FIXED images, meaning 1x and 2x and [0.25, 0.5, 1, 2] for CONSTRAINED. In this case, an image with a constrained layout
    and width = 400 would generate images at 100, 200, 400 and 800px wide. Ignored for FULL_WIDTH images, which use breakpoints instead
    """
    outputPixelDensities: [Float]

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    TRACED_SVG: a low-resolution traced SVG of the image.
    NONE: no placeholder. Set "background" to use a fixed background color.
    """
    placeholder: ImagePlaceholder

    """Options to pass to sharp when generating PNG images."""
    pngOptions: PNGOptions

    """The default quality. This is overridden by any format-specific options"""
    quality: Int

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download.
    You should usually leave this blank, and a suitable value will be calculated. The exception is if a FULL_WIDTH image
    does not actually span the full width of the screen, in which case you should pass the correct size here.
    """
    sizes: String

    """
    Options for traced placeholder SVGs. You also should set placeholder to "TRACED_SVG".
    """
    tracedSVGOptions: Potrace

    """
    Options to pass to sharp to control cropping and other image manipulations.
    """
    transformOptions: TransformOptions

    """Options to pass to sharp when generating WebP images."""
    webpOptions: WebPOptions

    """
    The display width of the generated image for layout = FIXED, and the maximum display width of the largest image for layout = CONSTRAINED.
    Ignored if layout = FLUID.
    """
    width: Int
  ): GatsbyImageData!
  id: ID!
  internal: Internal!
  original: ImageSharpOriginal
  parent: Node
  resize(background: String = "rgba(0,0,0,1)", base64: Boolean = false, cropFocus: ImageCropFocus = ATTENTION, duotone: DuotoneGradient = {}, fit: ImageFit = COVER, grayscale: Boolean = false, height: Int, jpegProgressive: Boolean = true, jpegQuality: Int, pngCompressionLevel: Int = 9, pngCompressionSpeed: Int = 4, pngQuality: Int, quality: Int, rotate: Int = 0, toFormat: ImageFormat = NO_CHANGE, traceSVG: Potrace = {}, trim: Float = 0, webpQuality: Int, width: Int): ImageSharpResize
}

type ImageSharpConnection {
  distinct(field: ImageSharpFieldSelector!): [String!]!
  edges: [ImageSharpEdge!]!
  group(field: ImageSharpFieldSelector!, limit: Int, skip: Int): [ImageSharpGroupConnection!]!
  max(field: ImageSharpFieldSelector!): Float
  min(field: ImageSharpFieldSelector!): Float
  nodes: [ImageSharp!]!
  pageInfo: PageInfo!
  sum(field: ImageSharpFieldSelector!): Float
  totalCount: Int!
}

type ImageSharpEdge {
  next: ImageSharp
  node: ImageSharp!
  previous: ImageSharp
}

input ImageSharpFieldSelector {
  children: NodeFieldSelector
  fixed: ImageSharpFixedFieldSelector
  fluid: ImageSharpFluidFieldSelector
  gatsbyImageData: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  original: ImageSharpOriginalFieldSelector
  parent: NodeFieldSelector
  resize: ImageSharpResizeFieldSelector
}

input ImageSharpFilterInput {
  children: NodeFilterListInput
  fixed: ImageSharpFixedFilterInput
  fluid: ImageSharpFluidFilterInput
  gatsbyImageData: GatsbyImageDataQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  original: ImageSharpOriginalFilterInput
  parent: NodeFilterInput
  resize: ImageSharpResizeFilterInput
}

input ImageSharpFilterListInput {
  elemMatch: ImageSharpFilterInput
}

type ImageSharpFixed {
  aspectRatio: Float
  base64: String
  height: Float!
  originalName: String
  src: String!
  srcSet: String!
  srcSetWebp: String
  srcWebp: String
  tracedSVG: String
  width: Float!
}

input ImageSharpFixedFieldSelector {
  aspectRatio: FieldSelectorEnum
  base64: FieldSelectorEnum
  height: FieldSelectorEnum
  originalName: FieldSelectorEnum
  src: FieldSelectorEnum
  srcSet: FieldSelectorEnum
  srcSetWebp: FieldSelectorEnum
  srcWebp: FieldSelectorEnum
  tracedSVG: FieldSelectorEnum
  width: FieldSelectorEnum
}

input ImageSharpFixedFilterInput {
  aspectRatio: FloatQueryOperatorInput
  base64: StringQueryOperatorInput
  height: FloatQueryOperatorInput
  originalName: StringQueryOperatorInput
  src: StringQueryOperatorInput
  srcSet: StringQueryOperatorInput
  srcSetWebp: StringQueryOperatorInput
  srcWebp: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
  width: FloatQueryOperatorInput
}

input ImageSharpFixedSortInput {
  aspectRatio: SortOrderEnum
  base64: SortOrderEnum
  height: SortOrderEnum
  originalName: SortOrderEnum
  src: SortOrderEnum
  srcSet: SortOrderEnum
  srcSetWebp: SortOrderEnum
  srcWebp: SortOrderEnum
  tracedSVG: SortOrderEnum
  width: SortOrderEnum
}

type ImageSharpFluid {
  aspectRatio: Float!
  base64: String
  originalImg: String
  originalName: String
  presentationHeight: Int!
  presentationWidth: Int!
  sizes: String!
  src: String!
  srcSet: String!
  srcSetWebp: String
  srcWebp: String
  tracedSVG: String
}

input ImageSharpFluidFieldSelector {
  aspectRatio: FieldSelectorEnum
  base64: FieldSelectorEnum
  originalImg: FieldSelectorEnum
  originalName: FieldSelectorEnum
  presentationHeight: FieldSelectorEnum
  presentationWidth: FieldSelectorEnum
  sizes: FieldSelectorEnum
  src: FieldSelectorEnum
  srcSet: FieldSelectorEnum
  srcSetWebp: FieldSelectorEnum
  srcWebp: FieldSelectorEnum
  tracedSVG: FieldSelectorEnum
}

input ImageSharpFluidFilterInput {
  aspectRatio: FloatQueryOperatorInput
  base64: StringQueryOperatorInput
  originalImg: StringQueryOperatorInput
  originalName: StringQueryOperatorInput
  presentationHeight: IntQueryOperatorInput
  presentationWidth: IntQueryOperatorInput
  sizes: StringQueryOperatorInput
  src: StringQueryOperatorInput
  srcSet: StringQueryOperatorInput
  srcSetWebp: StringQueryOperatorInput
  srcWebp: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
}

input ImageSharpFluidSortInput {
  aspectRatio: SortOrderEnum
  base64: SortOrderEnum
  originalImg: SortOrderEnum
  originalName: SortOrderEnum
  presentationHeight: SortOrderEnum
  presentationWidth: SortOrderEnum
  sizes: SortOrderEnum
  src: SortOrderEnum
  srcSet: SortOrderEnum
  srcSetWebp: SortOrderEnum
  srcWebp: SortOrderEnum
  tracedSVG: SortOrderEnum
}

type ImageSharpGroupConnection {
  distinct(field: ImageSharpFieldSelector!): [String!]!
  edges: [ImageSharpEdge!]!
  field: String!
  fieldValue: String
  group(field: ImageSharpFieldSelector!, limit: Int, skip: Int): [ImageSharpGroupConnection!]!
  max(field: ImageSharpFieldSelector!): Float
  min(field: ImageSharpFieldSelector!): Float
  nodes: [ImageSharp!]!
  pageInfo: PageInfo!
  sum(field: ImageSharpFieldSelector!): Float
  totalCount: Int!
}

type ImageSharpOriginal {
  height: Float
  src: String
  width: Float
}

input ImageSharpOriginalFieldSelector {
  height: FieldSelectorEnum
  src: FieldSelectorEnum
  width: FieldSelectorEnum
}

input ImageSharpOriginalFilterInput {
  height: FloatQueryOperatorInput
  src: StringQueryOperatorInput
  width: FloatQueryOperatorInput
}

input ImageSharpOriginalSortInput {
  height: SortOrderEnum
  src: SortOrderEnum
  width: SortOrderEnum
}

type ImageSharpResize {
  aspectRatio: Float
  height: Int
  originalName: String
  src: String
  tracedSVG: String
  width: Int
}

input ImageSharpResizeFieldSelector {
  aspectRatio: FieldSelectorEnum
  height: FieldSelectorEnum
  originalName: FieldSelectorEnum
  src: FieldSelectorEnum
  tracedSVG: FieldSelectorEnum
  width: FieldSelectorEnum
}

input ImageSharpResizeFilterInput {
  aspectRatio: FloatQueryOperatorInput
  height: IntQueryOperatorInput
  originalName: StringQueryOperatorInput
  src: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
  width: IntQueryOperatorInput
}

input ImageSharpResizeSortInput {
  aspectRatio: SortOrderEnum
  height: SortOrderEnum
  originalName: SortOrderEnum
  src: SortOrderEnum
  tracedSVG: SortOrderEnum
  width: SortOrderEnum
}

input ImageSharpSortInput {
  children: NodeSortInput
  fixed: ImageSharpFixedSortInput
  fluid: ImageSharpFluidSortInput
  gatsbyImageData: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  original: ImageSharpOriginalSortInput
  parent: NodeSortInput
  resize: ImageSharpResizeSortInput
}

input IntQueryOperatorInput {
  eq: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  ne: Int
  nin: [Int]
}

type Internal {
  content: String
  contentDigest: String!
  contentFilePath: String
  description: String
  fieldOwners: [String]
  ignoreType: Boolean
  mediaType: String
  owner: String!
  type: String!
}

input InternalFieldSelector {
  content: FieldSelectorEnum
  contentDigest: FieldSelectorEnum
  contentFilePath: FieldSelectorEnum
  description: FieldSelectorEnum
  fieldOwners: FieldSelectorEnum
  ignoreType: FieldSelectorEnum
  mediaType: FieldSelectorEnum
  owner: FieldSelectorEnum
  type: FieldSelectorEnum
}

input InternalFilterInput {
  content: StringQueryOperatorInput
  contentDigest: StringQueryOperatorInput
  contentFilePath: StringQueryOperatorInput
  description: StringQueryOperatorInput
  fieldOwners: StringQueryOperatorInput
  ignoreType: BooleanQueryOperatorInput
  mediaType: StringQueryOperatorInput
  owner: StringQueryOperatorInput
  type: StringQueryOperatorInput
}

input InternalSortInput {
  content: SortOrderEnum
  contentDigest: SortOrderEnum
  contentFilePath: SortOrderEnum
  description: SortOrderEnum
  fieldOwners: SortOrderEnum
  ignoreType: SortOrderEnum
  mediaType: SortOrderEnum
  owner: SortOrderEnum
  type: SortOrderEnum
}

input JPGOptions {
  progressive: Boolean = true
  quality: Int
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input JSONQueryOperatorInput {
  eq: JSON
  glob: JSON
  in: [JSON]
  ne: JSON
  nin: [JSON]
  regex: JSON
}

enum MarkdownExcerptFormats {
  HTML
  MARKDOWN
  PLAIN
}

type MarkdownHeading {
  depth: Int
  id: String
  value: String
}

input MarkdownHeadingFieldSelector {
  depth: FieldSelectorEnum
  id: FieldSelectorEnum
  value: FieldSelectorEnum
}

input MarkdownHeadingFilterInput {
  depth: IntQueryOperatorInput
  id: StringQueryOperatorInput
  value: StringQueryOperatorInput
}

input MarkdownHeadingFilterListInput {
  elemMatch: MarkdownHeadingFilterInput
}

enum MarkdownHeadingLevels {
  h1
  h2
  h3
  h4
  h5
  h6
}

input MarkdownHeadingSortInput {
  depth: SortOrderEnum
  id: SortOrderEnum
  value: SortOrderEnum
}

type MarkdownRemark implements Node {
  children: [Node!]!
  excerpt(format: MarkdownExcerptFormats = PLAIN, pruneLength: Int = 140, truncate: Boolean = false): String
  excerptAst(pruneLength: Int = 140, truncate: Boolean = false): JSON
  fileAbsolutePath: String
  frontmatter: MarkdownRemarkFrontmatter
  headings(depth: MarkdownHeadingLevels): [MarkdownHeading]
  html: String
  htmlAst: JSON
  id: ID!
  internal: Internal!
  parent: Node
  rawMarkdownBody: String
  tableOfContents(absolute: Boolean = false, heading: String, maxDepth: Int, pathToSlugField: String = ""): String
  timeToRead: Int
  wordCount: MarkdownWordCount
}

type MarkdownRemarkConnection {
  distinct(field: MarkdownRemarkFieldSelector!): [String!]!
  edges: [MarkdownRemarkEdge!]!
  group(field: MarkdownRemarkFieldSelector!, limit: Int, skip: Int): [MarkdownRemarkGroupConnection!]!
  max(field: MarkdownRemarkFieldSelector!): Float
  min(field: MarkdownRemarkFieldSelector!): Float
  nodes: [MarkdownRemark!]!
  pageInfo: PageInfo!
  sum(field: MarkdownRemarkFieldSelector!): Float
  totalCount: Int!
}

type MarkdownRemarkEdge {
  next: MarkdownRemark
  node: MarkdownRemark!
  previous: MarkdownRemark
}

input MarkdownRemarkFieldSelector {
  children: NodeFieldSelector
  excerpt: FieldSelectorEnum
  excerptAst: FieldSelectorEnum
  fileAbsolutePath: FieldSelectorEnum
  frontmatter: MarkdownRemarkFrontmatterFieldSelector
  headings: MarkdownHeadingFieldSelector
  html: FieldSelectorEnum
  htmlAst: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  parent: NodeFieldSelector
  rawMarkdownBody: FieldSelectorEnum
  tableOfContents: FieldSelectorEnum
  timeToRead: FieldSelectorEnum
  wordCount: MarkdownWordCountFieldSelector
}

input MarkdownRemarkFilterInput {
  children: NodeFilterListInput
  excerpt: StringQueryOperatorInput
  excerptAst: JSONQueryOperatorInput
  fileAbsolutePath: StringQueryOperatorInput
  frontmatter: MarkdownRemarkFrontmatterFilterInput
  headings: MarkdownHeadingFilterListInput
  html: StringQueryOperatorInput
  htmlAst: JSONQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  parent: NodeFilterInput
  rawMarkdownBody: StringQueryOperatorInput
  tableOfContents: StringQueryOperatorInput
  timeToRead: IntQueryOperatorInput
  wordCount: MarkdownWordCountFilterInput
}

input MarkdownRemarkFilterListInput {
  elemMatch: MarkdownRemarkFilterInput
}

type MarkdownRemarkFrontmatter {
  about: String
  answer: String
  author: String
  background: String
  brand: String
  caption: String
  color: String
  date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  description: String
  desktop: File
  endereco: String
  image: File
  link: String
  local: String
  logo: File
  mobile: File
  name: String
  path: String
  question: String
  tag: [String]
  tag_name: String
  title: String
  url: String
  year(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
}

input MarkdownRemarkFrontmatterFieldSelector {
  about: FieldSelectorEnum
  answer: FieldSelectorEnum
  author: FieldSelectorEnum
  background: FieldSelectorEnum
  brand: FieldSelectorEnum
  caption: FieldSelectorEnum
  color: FieldSelectorEnum
  date: FieldSelectorEnum
  description: FieldSelectorEnum
  desktop: FileFieldSelector
  endereco: FieldSelectorEnum
  image: FileFieldSelector
  link: FieldSelectorEnum
  local: FieldSelectorEnum
  logo: FileFieldSelector
  mobile: FileFieldSelector
  name: FieldSelectorEnum
  path: FieldSelectorEnum
  question: FieldSelectorEnum
  tag: FieldSelectorEnum
  tag_name: FieldSelectorEnum
  title: FieldSelectorEnum
  url: FieldSelectorEnum
  year: FieldSelectorEnum
}

input MarkdownRemarkFrontmatterFilterInput {
  about: StringQueryOperatorInput
  answer: StringQueryOperatorInput
  author: StringQueryOperatorInput
  background: StringQueryOperatorInput
  brand: StringQueryOperatorInput
  caption: StringQueryOperatorInput
  color: StringQueryOperatorInput
  date: DateQueryOperatorInput
  description: StringQueryOperatorInput
  desktop: FileFilterInput
  endereco: StringQueryOperatorInput
  image: FileFilterInput
  link: StringQueryOperatorInput
  local: StringQueryOperatorInput
  logo: FileFilterInput
  mobile: FileFilterInput
  name: StringQueryOperatorInput
  path: StringQueryOperatorInput
  question: StringQueryOperatorInput
  tag: StringQueryOperatorInput
  tag_name: StringQueryOperatorInput
  title: StringQueryOperatorInput
  url: StringQueryOperatorInput
  year: DateQueryOperatorInput
}

input MarkdownRemarkFrontmatterSortInput {
  about: SortOrderEnum
  answer: SortOrderEnum
  author: SortOrderEnum
  background: SortOrderEnum
  brand: SortOrderEnum
  caption: SortOrderEnum
  color: SortOrderEnum
  date: SortOrderEnum
  description: SortOrderEnum
  desktop: FileSortInput
  endereco: SortOrderEnum
  image: FileSortInput
  link: SortOrderEnum
  local: SortOrderEnum
  logo: FileSortInput
  mobile: FileSortInput
  name: SortOrderEnum
  path: SortOrderEnum
  question: SortOrderEnum
  tag: SortOrderEnum
  tag_name: SortOrderEnum
  title: SortOrderEnum
  url: SortOrderEnum
  year: SortOrderEnum
}

type MarkdownRemarkGroupConnection {
  distinct(field: MarkdownRemarkFieldSelector!): [String!]!
  edges: [MarkdownRemarkEdge!]!
  field: String!
  fieldValue: String
  group(field: MarkdownRemarkFieldSelector!, limit: Int, skip: Int): [MarkdownRemarkGroupConnection!]!
  max(field: MarkdownRemarkFieldSelector!): Float
  min(field: MarkdownRemarkFieldSelector!): Float
  nodes: [MarkdownRemark!]!
  pageInfo: PageInfo!
  sum(field: MarkdownRemarkFieldSelector!): Float
  totalCount: Int!
}

input MarkdownRemarkSortInput {
  children: NodeSortInput
  excerpt: SortOrderEnum
  excerptAst: SortOrderEnum
  fileAbsolutePath: SortOrderEnum
  frontmatter: MarkdownRemarkFrontmatterSortInput
  headings: MarkdownHeadingSortInput
  html: SortOrderEnum
  htmlAst: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  parent: NodeSortInput
  rawMarkdownBody: SortOrderEnum
  tableOfContents: SortOrderEnum
  timeToRead: SortOrderEnum
  wordCount: MarkdownWordCountSortInput
}

type MarkdownWordCount {
  paragraphs: Int
  sentences: Int
  words: Int
}

input MarkdownWordCountFieldSelector {
  paragraphs: FieldSelectorEnum
  sentences: FieldSelectorEnum
  words: FieldSelectorEnum
}

input MarkdownWordCountFilterInput {
  paragraphs: IntQueryOperatorInput
  sentences: IntQueryOperatorInput
  words: IntQueryOperatorInput
}

input MarkdownWordCountSortInput {
  paragraphs: SortOrderEnum
  sentences: SortOrderEnum
  words: SortOrderEnum
}

type Mdx implements Node {
  body: String
  children: [Node!]!
  excerpt(pruneLength: Int = 140): String
  fields: MdxFields
  frontmatter: MdxFrontmatter
  id: ID!
  internal: Internal!
  parent: Node
  tableOfContents(maxDepth: Int): JSON
}

type MdxConnection {
  distinct(field: MdxFieldSelector!): [String!]!
  edges: [MdxEdge!]!
  group(field: MdxFieldSelector!, limit: Int, skip: Int): [MdxGroupConnection!]!
  max(field: MdxFieldSelector!): Float
  min(field: MdxFieldSelector!): Float
  nodes: [Mdx!]!
  pageInfo: PageInfo!
  sum(field: MdxFieldSelector!): Float
  totalCount: Int!
}

type MdxEdge {
  next: Mdx
  node: Mdx!
  previous: Mdx
}

input MdxFieldSelector {
  body: FieldSelectorEnum
  children: NodeFieldSelector
  excerpt: FieldSelectorEnum
  fields: MdxFieldsFieldSelector
  frontmatter: MdxFrontmatterFieldSelector
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  parent: NodeFieldSelector
  tableOfContents: FieldSelectorEnum
}

type MdxFields {
  slug: String
}

input MdxFieldsFieldSelector {
  slug: FieldSelectorEnum
}

input MdxFieldsFilterInput {
  slug: StringQueryOperatorInput
}

input MdxFieldsSortInput {
  slug: SortOrderEnum
}

input MdxFilterInput {
  body: StringQueryOperatorInput
  children: NodeFilterListInput
  excerpt: StringQueryOperatorInput
  fields: MdxFieldsFilterInput
  frontmatter: MdxFrontmatterFilterInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  parent: NodeFilterInput
  tableOfContents: JSONQueryOperatorInput
}

input MdxFilterListInput {
  elemMatch: MdxFilterInput
}

type MdxFrontmatter {
  about: String
  answer: String
  author: String
  background: String
  brand: String
  caption: String
  color: String
  date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  description: String
  desktop: File
  endereco: String
  image: File
  link: String
  local: String
  logo: File
  mobile: File
  name: String
  path: String
  question: String
  tag: [String]
  tag_name: String
  title: String
  url: String
  year(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
}

input MdxFrontmatterFieldSelector {
  about: FieldSelectorEnum
  answer: FieldSelectorEnum
  author: FieldSelectorEnum
  background: FieldSelectorEnum
  brand: FieldSelectorEnum
  caption: FieldSelectorEnum
  color: FieldSelectorEnum
  date: FieldSelectorEnum
  description: FieldSelectorEnum
  desktop: FileFieldSelector
  endereco: FieldSelectorEnum
  image: FileFieldSelector
  link: FieldSelectorEnum
  local: FieldSelectorEnum
  logo: FileFieldSelector
  mobile: FileFieldSelector
  name: FieldSelectorEnum
  path: FieldSelectorEnum
  question: FieldSelectorEnum
  tag: FieldSelectorEnum
  tag_name: FieldSelectorEnum
  title: FieldSelectorEnum
  url: FieldSelectorEnum
  year: FieldSelectorEnum
}

input MdxFrontmatterFilterInput {
  about: StringQueryOperatorInput
  answer: StringQueryOperatorInput
  author: StringQueryOperatorInput
  background: StringQueryOperatorInput
  brand: StringQueryOperatorInput
  caption: StringQueryOperatorInput
  color: StringQueryOperatorInput
  date: DateQueryOperatorInput
  description: StringQueryOperatorInput
  desktop: FileFilterInput
  endereco: StringQueryOperatorInput
  image: FileFilterInput
  link: StringQueryOperatorInput
  local: StringQueryOperatorInput
  logo: FileFilterInput
  mobile: FileFilterInput
  name: StringQueryOperatorInput
  path: StringQueryOperatorInput
  question: StringQueryOperatorInput
  tag: StringQueryOperatorInput
  tag_name: StringQueryOperatorInput
  title: StringQueryOperatorInput
  url: StringQueryOperatorInput
  year: DateQueryOperatorInput
}

input MdxFrontmatterSortInput {
  about: SortOrderEnum
  answer: SortOrderEnum
  author: SortOrderEnum
  background: SortOrderEnum
  brand: SortOrderEnum
  caption: SortOrderEnum
  color: SortOrderEnum
  date: SortOrderEnum
  description: SortOrderEnum
  desktop: FileSortInput
  endereco: SortOrderEnum
  image: FileSortInput
  link: SortOrderEnum
  local: SortOrderEnum
  logo: FileSortInput
  mobile: FileSortInput
  name: SortOrderEnum
  path: SortOrderEnum
  question: SortOrderEnum
  tag: SortOrderEnum
  tag_name: SortOrderEnum
  title: SortOrderEnum
  url: SortOrderEnum
  year: SortOrderEnum
}

type MdxGroupConnection {
  distinct(field: MdxFieldSelector!): [String!]!
  edges: [MdxEdge!]!
  field: String!
  fieldValue: String
  group(field: MdxFieldSelector!, limit: Int, skip: Int): [MdxGroupConnection!]!
  max(field: MdxFieldSelector!): Float
  min(field: MdxFieldSelector!): Float
  nodes: [Mdx!]!
  pageInfo: PageInfo!
  sum(field: MdxFieldSelector!): Float
  totalCount: Int!
}

input MdxSortInput {
  body: SortOrderEnum
  children: NodeSortInput
  excerpt: SortOrderEnum
  fields: MdxFieldsSortInput
  frontmatter: MdxFrontmatterSortInput
  id: SortOrderEnum
  internal: InternalSortInput
  parent: NodeSortInput
  tableOfContents: SortOrderEnum
}

"""Node Interface"""
interface Node {
  children: [Node!]!
  id: ID!
  internal: Internal!
  parent: Node
}

input NodeFieldSelector {
  children: NodeFieldSelector
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  parent: NodeFieldSelector
}

input NodeFilterInput {
  children: NodeFilterListInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  parent: NodeFilterInput
}

input NodeFilterListInput {
  elemMatch: NodeFilterInput
}

input NodeSortInput {
  children: NodeSortInput
  id: SortOrderEnum
  internal: InternalSortInput
  parent: NodeSortInput
}

input PNGOptions {
  compressionSpeed: Int = 4
  quality: Int
}

type PageInfo {
  currentPage: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  itemCount: Int!
  pageCount: Int!
  perPage: Int
  totalCount: Int!
}

input Potrace {
  alphaMax: Float
  background: String
  blackOnWhite: Boolean
  color: String
  optCurve: Boolean
  optTolerance: Float
  threshold: Int
  turdSize: Float
  turnPolicy: PotraceTurnPolicy
}

enum PotraceTurnPolicy {
  TURNPOLICY_BLACK
  TURNPOLICY_LEFT
  TURNPOLICY_MAJORITY
  TURNPOLICY_MINORITY
  TURNPOLICY_RIGHT
  TURNPOLICY_WHITE
}

type Query {
  allContentYaml(filter: ContentYamlFilterInput, limit: Int, skip: Int, sort: [ContentYamlSortInput]): ContentYamlConnection!
  allDirectory(filter: DirectoryFilterInput, limit: Int, skip: Int, sort: [DirectorySortInput]): DirectoryConnection!
  allFile(filter: FileFilterInput, limit: Int, skip: Int, sort: [FileSortInput]): FileConnection!
  allImageSharp(filter: ImageSharpFilterInput, limit: Int, skip: Int, sort: [ImageSharpSortInput]): ImageSharpConnection!
  allMarkdownRemark(filter: MarkdownRemarkFilterInput, limit: Int, skip: Int, sort: [MarkdownRemarkSortInput]): MarkdownRemarkConnection!
  allMdx(filter: MdxFilterInput, limit: Int, skip: Int, sort: [MdxSortInput]): MdxConnection!
  allSite(filter: SiteFilterInput, limit: Int, skip: Int, sort: [SiteSortInput]): SiteConnection!
  allSiteBuildMetadata(filter: SiteBuildMetadataFilterInput, limit: Int, skip: Int, sort: [SiteBuildMetadataSortInput]): SiteBuildMetadataConnection!
  allSiteFunction(filter: SiteFunctionFilterInput, limit: Int, skip: Int, sort: [SiteFunctionSortInput]): SiteFunctionConnection!
  allSitePage(filter: SitePageFilterInput, limit: Int, skip: Int, sort: [SitePageSortInput]): SitePageConnection!
  allStaticImage(filter: StaticImageFilterInput, limit: Int, skip: Int, sort: [StaticImageSortInput]): StaticImageConnection!
  contentYaml(caption: StringQueryOperatorInput, children: NodeFilterListInput, id: StringQueryOperatorInput, internal: InternalFilterInput, name: StringQueryOperatorInput, parent: NodeFilterInput, title: StringQueryOperatorInput): ContentYaml
  directory(absolutePath: StringQueryOperatorInput, accessTime: DateQueryOperatorInput, atime: DateQueryOperatorInput, atimeMs: FloatQueryOperatorInput, base: StringQueryOperatorInput, birthTime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, changeTime: DateQueryOperatorInput, children: NodeFilterListInput, ctime: DateQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, dev: IntQueryOperatorInput, dir: StringQueryOperatorInput, ext: StringQueryOperatorInput, extension: StringQueryOperatorInput, gid: IntQueryOperatorInput, id: StringQueryOperatorInput, ino: FloatQueryOperatorInput, internal: InternalFilterInput, mode: IntQueryOperatorInput, modifiedTime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, name: StringQueryOperatorInput, nlink: IntQueryOperatorInput, parent: NodeFilterInput, prettySize: StringQueryOperatorInput, rdev: IntQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, root: StringQueryOperatorInput, size: IntQueryOperatorInput, sourceInstanceName: StringQueryOperatorInput, uid: IntQueryOperatorInput): Directory
  file(absolutePath: StringQueryOperatorInput, accessTime: DateQueryOperatorInput, atime: DateQueryOperatorInput, atimeMs: FloatQueryOperatorInput, base: StringQueryOperatorInput, birthTime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, blksize: IntQueryOperatorInput, blocks: IntQueryOperatorInput, changeTime: DateQueryOperatorInput, childContentYaml: ContentYamlFilterInput, childImageSharp: ImageSharpFilterInput, childMarkdownRemark: MarkdownRemarkFilterInput, childMdx: MdxFilterInput, children: NodeFilterListInput, childrenContentYaml: ContentYamlFilterListInput, childrenImageSharp: ImageSharpFilterListInput, childrenMarkdownRemark: MarkdownRemarkFilterListInput, childrenMdx: MdxFilterListInput, ctime: DateQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, dev: IntQueryOperatorInput, dir: StringQueryOperatorInput, ext: StringQueryOperatorInput, extension: StringQueryOperatorInput, gid: IntQueryOperatorInput, id: StringQueryOperatorInput, ino: FloatQueryOperatorInput, internal: InternalFilterInput, mode: IntQueryOperatorInput, modifiedTime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, name: StringQueryOperatorInput, nlink: IntQueryOperatorInput, parent: NodeFilterInput, prettySize: StringQueryOperatorInput, publicURL: StringQueryOperatorInput, rdev: IntQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, root: StringQueryOperatorInput, size: IntQueryOperatorInput, sourceInstanceName: StringQueryOperatorInput, uid: IntQueryOperatorInput): File
  imageSharp(children: NodeFilterListInput, fixed: ImageSharpFixedFilterInput, fluid: ImageSharpFluidFilterInput, gatsbyImageData: GatsbyImageDataQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, original: ImageSharpOriginalFilterInput, parent: NodeFilterInput, resize: ImageSharpResizeFilterInput): ImageSharp
  markdownRemark(children: NodeFilterListInput, excerpt: StringQueryOperatorInput, excerptAst: JSONQueryOperatorInput, fileAbsolutePath: StringQueryOperatorInput, frontmatter: MarkdownRemarkFrontmatterFilterInput, headings: MarkdownHeadingFilterListInput, html: StringQueryOperatorInput, htmlAst: JSONQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, parent: NodeFilterInput, rawMarkdownBody: StringQueryOperatorInput, tableOfContents: StringQueryOperatorInput, timeToRead: IntQueryOperatorInput, wordCount: MarkdownWordCountFilterInput): MarkdownRemark
  mdx(body: StringQueryOperatorInput, children: NodeFilterListInput, excerpt: StringQueryOperatorInput, fields: MdxFieldsFilterInput, frontmatter: MdxFrontmatterFilterInput, id: StringQueryOperatorInput, internal: InternalFilterInput, parent: NodeFilterInput, tableOfContents: JSONQueryOperatorInput): Mdx
  site(buildTime: DateQueryOperatorInput, children: NodeFilterListInput, graphqlTypegen: BooleanQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, jsxRuntime: StringQueryOperatorInput, parent: NodeFilterInput, pathPrefix: StringQueryOperatorInput, polyfill: BooleanQueryOperatorInput, siteMetadata: SiteSiteMetadataFilterInput, trailingSlash: StringQueryOperatorInput): Site
  siteBuildMetadata(buildTime: DateQueryOperatorInput, children: NodeFilterListInput, id: StringQueryOperatorInput, internal: InternalFilterInput, parent: NodeFilterInput): SiteBuildMetadata
  siteFunction(absoluteCompiledFilePath: StringQueryOperatorInput, children: NodeFilterListInput, functionRoute: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, matchPath: StringQueryOperatorInput, originalAbsoluteFilePath: StringQueryOperatorInput, originalRelativeFilePath: StringQueryOperatorInput, parent: NodeFilterInput, pluginName: StringQueryOperatorInput, relativeCompiledFilePath: StringQueryOperatorInput): SiteFunction
  sitePage(children: NodeFilterListInput, component: StringQueryOperatorInput, componentChunkName: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, internalComponentName: StringQueryOperatorInput, matchPath: StringQueryOperatorInput, pageContext: JSONQueryOperatorInput, parent: NodeFilterInput, path: StringQueryOperatorInput): SitePage
  staticImage(absolutePath: StringQueryOperatorInput, accessTime: DateQueryOperatorInput, atime: DateQueryOperatorInput, atimeMs: FloatQueryOperatorInput, base: StringQueryOperatorInput, birthTime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, blksize: IntQueryOperatorInput, blocks: IntQueryOperatorInput, changeTime: DateQueryOperatorInput, children: NodeFilterListInput, ctime: DateQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, dev: IntQueryOperatorInput, dir: StringQueryOperatorInput, ext: StringQueryOperatorInput, extension: StringQueryOperatorInput, id: StringQueryOperatorInput, ino: IntQueryOperatorInput, internal: InternalFilterInput, mode: IntQueryOperatorInput, modifiedTime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, name: StringQueryOperatorInput, nlink: IntQueryOperatorInput, parent: NodeFilterInput, prettySize: StringQueryOperatorInput, rdev: IntQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, root: StringQueryOperatorInput, size: IntQueryOperatorInput, sourceInstanceName: StringQueryOperatorInput, uid: IntQueryOperatorInput): StaticImage
}

type Site implements Node {
  buildTime(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  children: [Node!]!
  graphqlTypegen: Boolean
  id: ID!
  internal: Internal!
  jsxRuntime: String
  parent: Node
  pathPrefix: String
  polyfill: Boolean
  siteMetadata: SiteSiteMetadata
  trailingSlash: String
}

type SiteBuildMetadata implements Node {
  buildTime(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  children: [Node!]!
  id: ID!
  internal: Internal!
  parent: Node
}

type SiteBuildMetadataConnection {
  distinct(field: SiteBuildMetadataFieldSelector!): [String!]!
  edges: [SiteBuildMetadataEdge!]!
  group(field: SiteBuildMetadataFieldSelector!, limit: Int, skip: Int): [SiteBuildMetadataGroupConnection!]!
  max(field: SiteBuildMetadataFieldSelector!): Float
  min(field: SiteBuildMetadataFieldSelector!): Float
  nodes: [SiteBuildMetadata!]!
  pageInfo: PageInfo!
  sum(field: SiteBuildMetadataFieldSelector!): Float
  totalCount: Int!
}

type SiteBuildMetadataEdge {
  next: SiteBuildMetadata
  node: SiteBuildMetadata!
  previous: SiteBuildMetadata
}

input SiteBuildMetadataFieldSelector {
  buildTime: FieldSelectorEnum
  children: NodeFieldSelector
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  parent: NodeFieldSelector
}

input SiteBuildMetadataFilterInput {
  buildTime: DateQueryOperatorInput
  children: NodeFilterListInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  parent: NodeFilterInput
}

type SiteBuildMetadataGroupConnection {
  distinct(field: SiteBuildMetadataFieldSelector!): [String!]!
  edges: [SiteBuildMetadataEdge!]!
  field: String!
  fieldValue: String
  group(field: SiteBuildMetadataFieldSelector!, limit: Int, skip: Int): [SiteBuildMetadataGroupConnection!]!
  max(field: SiteBuildMetadataFieldSelector!): Float
  min(field: SiteBuildMetadataFieldSelector!): Float
  nodes: [SiteBuildMetadata!]!
  pageInfo: PageInfo!
  sum(field: SiteBuildMetadataFieldSelector!): Float
  totalCount: Int!
}

input SiteBuildMetadataSortInput {
  buildTime: SortOrderEnum
  children: NodeSortInput
  id: SortOrderEnum
  internal: InternalSortInput
  parent: NodeSortInput
}

type SiteConnection {
  distinct(field: SiteFieldSelector!): [String!]!
  edges: [SiteEdge!]!
  group(field: SiteFieldSelector!, limit: Int, skip: Int): [SiteGroupConnection!]!
  max(field: SiteFieldSelector!): Float
  min(field: SiteFieldSelector!): Float
  nodes: [Site!]!
  pageInfo: PageInfo!
  sum(field: SiteFieldSelector!): Float
  totalCount: Int!
}

type SiteEdge {
  next: Site
  node: Site!
  previous: Site
}

input SiteFieldSelector {
  buildTime: FieldSelectorEnum
  children: NodeFieldSelector
  graphqlTypegen: FieldSelectorEnum
  host: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  jsxRuntime: FieldSelectorEnum
  parent: NodeFieldSelector
  pathPrefix: FieldSelectorEnum
  polyfill: FieldSelectorEnum
  port: FieldSelectorEnum
  siteMetadata: SiteSiteMetadataFieldSelector
  trailingSlash: FieldSelectorEnum
}

input SiteFilterInput {
  buildTime: DateQueryOperatorInput
  children: NodeFilterListInput
  graphqlTypegen: BooleanQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  jsxRuntime: StringQueryOperatorInput
  parent: NodeFilterInput
  pathPrefix: StringQueryOperatorInput
  polyfill: BooleanQueryOperatorInput
  siteMetadata: SiteSiteMetadataFilterInput
  trailingSlash: StringQueryOperatorInput
}

type SiteFunction implements Node {
  absoluteCompiledFilePath: String!
  children: [Node!]!
  functionRoute: String!
  id: ID!
  internal: Internal!
  matchPath: String
  originalAbsoluteFilePath: String!
  originalRelativeFilePath: String!
  parent: Node
  pluginName: String!
  relativeCompiledFilePath: String!
}

type SiteFunctionConnection {
  distinct(field: SiteFunctionFieldSelector!): [String!]!
  edges: [SiteFunctionEdge!]!
  group(field: SiteFunctionFieldSelector!, limit: Int, skip: Int): [SiteFunctionGroupConnection!]!
  max(field: SiteFunctionFieldSelector!): Float
  min(field: SiteFunctionFieldSelector!): Float
  nodes: [SiteFunction!]!
  pageInfo: PageInfo!
  sum(field: SiteFunctionFieldSelector!): Float
  totalCount: Int!
}

type SiteFunctionEdge {
  next: SiteFunction
  node: SiteFunction!
  previous: SiteFunction
}

input SiteFunctionFieldSelector {
  absoluteCompiledFilePath: FieldSelectorEnum
  children: NodeFieldSelector
  functionRoute: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  matchPath: FieldSelectorEnum
  originalAbsoluteFilePath: FieldSelectorEnum
  originalRelativeFilePath: FieldSelectorEnum
  parent: NodeFieldSelector
  pluginName: FieldSelectorEnum
  relativeCompiledFilePath: FieldSelectorEnum
}

input SiteFunctionFilterInput {
  absoluteCompiledFilePath: StringQueryOperatorInput
  children: NodeFilterListInput
  functionRoute: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  matchPath: StringQueryOperatorInput
  originalAbsoluteFilePath: StringQueryOperatorInput
  originalRelativeFilePath: StringQueryOperatorInput
  parent: NodeFilterInput
  pluginName: StringQueryOperatorInput
  relativeCompiledFilePath: StringQueryOperatorInput
}

type SiteFunctionGroupConnection {
  distinct(field: SiteFunctionFieldSelector!): [String!]!
  edges: [SiteFunctionEdge!]!
  field: String!
  fieldValue: String
  group(field: SiteFunctionFieldSelector!, limit: Int, skip: Int): [SiteFunctionGroupConnection!]!
  max(field: SiteFunctionFieldSelector!): Float
  min(field: SiteFunctionFieldSelector!): Float
  nodes: [SiteFunction!]!
  pageInfo: PageInfo!
  sum(field: SiteFunctionFieldSelector!): Float
  totalCount: Int!
}

input SiteFunctionSortInput {
  absoluteCompiledFilePath: SortOrderEnum
  children: NodeSortInput
  functionRoute: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  matchPath: SortOrderEnum
  originalAbsoluteFilePath: SortOrderEnum
  originalRelativeFilePath: SortOrderEnum
  parent: NodeSortInput
  pluginName: SortOrderEnum
  relativeCompiledFilePath: SortOrderEnum
}

type SiteGroupConnection {
  distinct(field: SiteFieldSelector!): [String!]!
  edges: [SiteEdge!]!
  field: String!
  fieldValue: String
  group(field: SiteFieldSelector!, limit: Int, skip: Int): [SiteGroupConnection!]!
  max(field: SiteFieldSelector!): Float
  min(field: SiteFieldSelector!): Float
  nodes: [Site!]!
  pageInfo: PageInfo!
  sum(field: SiteFieldSelector!): Float
  totalCount: Int!
}

type SitePage implements Node {
  children: [Node!]!
  component: String!
  componentChunkName: String!
  id: ID!
  internal: Internal!
  internalComponentName: String!
  matchPath: String
  pageContext: JSON
  parent: Node
  path: String!
}

type SitePageConnection {
  distinct(field: SitePageFieldSelector!): [String!]!
  edges: [SitePageEdge!]!
  group(field: SitePageFieldSelector!, limit: Int, skip: Int): [SitePageGroupConnection!]!
  max(field: SitePageFieldSelector!): Float
  min(field: SitePageFieldSelector!): Float
  nodes: [SitePage!]!
  pageInfo: PageInfo!
  sum(field: SitePageFieldSelector!): Float
  totalCount: Int!
}

type SitePageEdge {
  next: SitePage
  node: SitePage!
  previous: SitePage
}

input SitePageFieldSelector {
  children: NodeFieldSelector
  component: FieldSelectorEnum
  componentChunkName: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  internalComponentName: FieldSelectorEnum
  matchPath: FieldSelectorEnum
  pageContext: FieldSelectorEnum
  parent: NodeFieldSelector
  path: FieldSelectorEnum
}

input SitePageFilterInput {
  children: NodeFilterListInput
  component: StringQueryOperatorInput
  componentChunkName: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  internalComponentName: StringQueryOperatorInput
  matchPath: StringQueryOperatorInput
  pageContext: JSONQueryOperatorInput
  parent: NodeFilterInput
  path: StringQueryOperatorInput
}

type SitePageGroupConnection {
  distinct(field: SitePageFieldSelector!): [String!]!
  edges: [SitePageEdge!]!
  field: String!
  fieldValue: String
  group(field: SitePageFieldSelector!, limit: Int, skip: Int): [SitePageGroupConnection!]!
  max(field: SitePageFieldSelector!): Float
  min(field: SitePageFieldSelector!): Float
  nodes: [SitePage!]!
  pageInfo: PageInfo!
  sum(field: SitePageFieldSelector!): Float
  totalCount: Int!
}

input SitePageSortInput {
  children: NodeSortInput
  component: SortOrderEnum
  componentChunkName: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  internalComponentName: SortOrderEnum
  matchPath: SortOrderEnum
  pageContext: SortOrderEnum
  parent: NodeSortInput
  path: SortOrderEnum
}

type SiteSiteMetadata {
  description: String
  siteUrl: String
  title: String
}

input SiteSiteMetadataFieldSelector {
  description: FieldSelectorEnum
  siteUrl: FieldSelectorEnum
  title: FieldSelectorEnum
}

input SiteSiteMetadataFilterInput {
  description: StringQueryOperatorInput
  siteUrl: StringQueryOperatorInput
  title: StringQueryOperatorInput
}

input SiteSiteMetadataSortInput {
  description: SortOrderEnum
  siteUrl: SortOrderEnum
  title: SortOrderEnum
}

input SiteSortInput {
  buildTime: SortOrderEnum
  children: NodeSortInput
  graphqlTypegen: SortOrderEnum
  host: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  jsxRuntime: SortOrderEnum
  parent: NodeSortInput
  pathPrefix: SortOrderEnum
  polyfill: SortOrderEnum
  port: SortOrderEnum
  siteMetadata: SiteSiteMetadataSortInput
  trailingSlash: SortOrderEnum
}

enum SortOrderEnum {
  ASC
  DESC
}

type StaticImage implements Node {
  absolutePath: String
  accessTime(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  atime(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  atimeMs: Float
  base: String
  birthTime(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  birthtime(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  birthtimeMs: Float
  blksize: Int
  blocks: Int
  changeTime(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  children: [Node!]!
  ctime(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  ctimeMs: Float
  dev: Int
  dir: String
  ext: String
  extension: String
  id: ID!
  ino: Int
  internal: Internal!
  mode: Int
  modifiedTime(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  mtime(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  mtimeMs: Float
  name: String
  nlink: Int
  parent: Node
  prettySize: String
  rdev: Int
  relativeDirectory: String
  relativePath: String
  root: String
  size: Int
  sourceInstanceName: String
  uid: Int
}

type StaticImageConnection {
  distinct(field: StaticImageFieldSelector!): [String!]!
  edges: [StaticImageEdge!]!
  group(field: StaticImageFieldSelector!, limit: Int, skip: Int): [StaticImageGroupConnection!]!
  max(field: StaticImageFieldSelector!): Float
  min(field: StaticImageFieldSelector!): Float
  nodes: [StaticImage!]!
  pageInfo: PageInfo!
  sum(field: StaticImageFieldSelector!): Float
  totalCount: Int!
}

type StaticImageEdge {
  next: StaticImage
  node: StaticImage!
  previous: StaticImage
}

input StaticImageFieldSelector {
  absolutePath: FieldSelectorEnum
  accessTime: FieldSelectorEnum
  atime: FieldSelectorEnum
  atimeMs: FieldSelectorEnum
  base: FieldSelectorEnum
  birthTime: FieldSelectorEnum
  birthtime: FieldSelectorEnum
  birthtimeMs: FieldSelectorEnum
  blksize: FieldSelectorEnum
  blocks: FieldSelectorEnum
  changeTime: FieldSelectorEnum
  children: NodeFieldSelector
  ctime: FieldSelectorEnum
  ctimeMs: FieldSelectorEnum
  dev: FieldSelectorEnum
  dir: FieldSelectorEnum
  ext: FieldSelectorEnum
  extension: FieldSelectorEnum
  id: FieldSelectorEnum
  ino: FieldSelectorEnum
  internal: InternalFieldSelector
  mode: FieldSelectorEnum
  modifiedTime: FieldSelectorEnum
  mtime: FieldSelectorEnum
  mtimeMs: FieldSelectorEnum
  name: FieldSelectorEnum
  nlink: FieldSelectorEnum
  parent: NodeFieldSelector
  prettySize: FieldSelectorEnum
  rdev: FieldSelectorEnum
  relativeDirectory: FieldSelectorEnum
  relativePath: FieldSelectorEnum
  root: FieldSelectorEnum
  size: FieldSelectorEnum
  sourceInstanceName: FieldSelectorEnum
  uid: FieldSelectorEnum
}

input StaticImageFilterInput {
  absolutePath: StringQueryOperatorInput
  accessTime: DateQueryOperatorInput
  atime: DateQueryOperatorInput
  atimeMs: FloatQueryOperatorInput
  base: StringQueryOperatorInput
  birthTime: DateQueryOperatorInput
  birthtime: DateQueryOperatorInput
  birthtimeMs: FloatQueryOperatorInput
  blksize: IntQueryOperatorInput
  blocks: IntQueryOperatorInput
  changeTime: DateQueryOperatorInput
  children: NodeFilterListInput
  ctime: DateQueryOperatorInput
  ctimeMs: FloatQueryOperatorInput
  dev: IntQueryOperatorInput
  dir: StringQueryOperatorInput
  ext: StringQueryOperatorInput
  extension: StringQueryOperatorInput
  id: StringQueryOperatorInput
  ino: IntQueryOperatorInput
  internal: InternalFilterInput
  mode: IntQueryOperatorInput
  modifiedTime: DateQueryOperatorInput
  mtime: DateQueryOperatorInput
  mtimeMs: FloatQueryOperatorInput
  name: StringQueryOperatorInput
  nlink: IntQueryOperatorInput
  parent: NodeFilterInput
  prettySize: StringQueryOperatorInput
  rdev: IntQueryOperatorInput
  relativeDirectory: StringQueryOperatorInput
  relativePath: StringQueryOperatorInput
  root: StringQueryOperatorInput
  size: IntQueryOperatorInput
  sourceInstanceName: StringQueryOperatorInput
  uid: IntQueryOperatorInput
}

type StaticImageGroupConnection {
  distinct(field: StaticImageFieldSelector!): [String!]!
  edges: [StaticImageEdge!]!
  field: String!
  fieldValue: String
  group(field: StaticImageFieldSelector!, limit: Int, skip: Int): [StaticImageGroupConnection!]!
  max(field: StaticImageFieldSelector!): Float
  min(field: StaticImageFieldSelector!): Float
  nodes: [StaticImage!]!
  pageInfo: PageInfo!
  sum(field: StaticImageFieldSelector!): Float
  totalCount: Int!
}

input StaticImageSortInput {
  absolutePath: SortOrderEnum
  accessTime: SortOrderEnum
  atime: SortOrderEnum
  atimeMs: SortOrderEnum
  base: SortOrderEnum
  birthTime: SortOrderEnum
  birthtime: SortOrderEnum
  birthtimeMs: SortOrderEnum
  blksize: SortOrderEnum
  blocks: SortOrderEnum
  changeTime: SortOrderEnum
  children: NodeSortInput
  ctime: SortOrderEnum
  ctimeMs: SortOrderEnum
  dev: SortOrderEnum
  dir: SortOrderEnum
  ext: SortOrderEnum
  extension: SortOrderEnum
  id: SortOrderEnum
  ino: SortOrderEnum
  internal: InternalSortInput
  mode: SortOrderEnum
  modifiedTime: SortOrderEnum
  mtime: SortOrderEnum
  mtimeMs: SortOrderEnum
  name: SortOrderEnum
  nlink: SortOrderEnum
  parent: NodeSortInput
  prettySize: SortOrderEnum
  rdev: SortOrderEnum
  relativeDirectory: SortOrderEnum
  relativePath: SortOrderEnum
  root: SortOrderEnum
  size: SortOrderEnum
  sourceInstanceName: SortOrderEnum
  uid: SortOrderEnum
}

input StringQueryOperatorInput {
  eq: String
  glob: String
  in: [String]
  ne: String
  nin: [String]
  regex: String
}

input TransformOptions {
  cropFocus: ImageCropFocus = ATTENTION
  duotone: DuotoneGradient = {}
  fit: ImageFit = COVER
  grayscale: Boolean = false
  rotate: Int = 0
  trim: Float = 0
}

input WebPOptions {
  quality: Int
}